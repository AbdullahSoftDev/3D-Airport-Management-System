#ifndef FLIGHTSEARCHWINDOW_H
#define FLIGHTSEARCHWINDOW_H

#include <QWidget>          // Base class for our custom window
#include <QTableWidget>     // For displaying search results
#include <QLineEdit>        // For origin, destination input fields
#include <QDateEdit>        // For the departure date input
#include <QPushButton>      // For search and back buttons
#include <QMessageBox>      // For displaying information/error messages
#include <QFile>            // For reading data from CSV files
#include <QTextStream>      // For reading text streams from files
#include <QDebug>           // For debugging output (qDebug(), qWarning())
#include <QHeaderView>      // For customizing table headers (e.g., resizing)
#include <QDate>            // For QDate functionalities
#include "AppPaths.h"
// Forward declaration of MainWindow
// This is crucial to avoid circular includes if MainWindow also includes this header.
class MainWindow;

namespace Ui {
// Forward declaration for the UI class generated by Qt's User Interface Compiler (uic)
class FlightSearchWindow;
}

class FlightSearchWindow : public QWidget
{
    Q_OBJECT // This macro is essential for Qt's signal/slot mechanism to work.

public:
    // Constructor: Initializes the FlightSearchWindow.
    explicit FlightSearchWindow(QWidget *parent = nullptr);
    // Destructor: Cleans up dynamically allocated resources.
    ~FlightSearchWindow();

    // Method to set a pointer back to the MainWindow.
    // This allows FlightSearchWindow to interact with (e.g., show) the MainWindow.
    void setMainWindow(MainWindow *window);

private slots:
    // Slot for the "Search Flights" button click.
    void on_searchButton_clicked();
    // Slot for the "Back" button click.
    void on_backButton_clicked();

private:
    Ui::FlightSearchWindow *ui; // Pointer to the UI elements defined in the .ui file.
    MainWindow *mainWindow;     // Pointer to the MainWindow for navigation.

    // Private helper functions to encapsulate specific functionalities.
    void applyStyling();       // Applies custom CSS-like styling to the widgets.
    void setupFlightsTable();  // Configures the columns and headers of the QTableWidget.
    // Loads flight data from a CSV file and applies filters based on user input.
    void loadFlightsFromCsv(const QString &filePath,
                            const QString &originFilter = QString(),      // Default to empty string (no filter)
                            const QString &destinationFilter = QString(), // Default to empty string (no filter)
                            const QDate &dateFilter = QDate());           // Default to null QDate (no filter)
};

#endif // FLIGHTSEARCHWINDOW_H
