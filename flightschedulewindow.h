#ifndef FLIGHTSCHEDULEWINDOW_H
#define FLIGHTSCHEDULEWINDOW_H

#include <QWidget>          // Base class for our custom window
#include <QFile>            // For reading data from CSV files
#include <QTextStream>      // For reading text streams from files
#include <QMessageBox>      // For displaying information/error messages
#include <QDebug>           // For debugging output to the console
#include <QTableWidgetItem> // For items displayed in QTableWidget
#include <QHeaderView>      // Required for QHeaderView::ResizeToContents
#include "AppPaths.h"
// Forward declare MainWindow to avoid circular dependencies
class MainWindow;

QT_BEGIN_NAMESPACE
namespace Ui { class FlightScheduleWindow; } // Forward declaration for the UI class generated by uic
QT_END_NAMESPACE

class FlightScheduleWindow : public QWidget
{
    Q_OBJECT // This macro is essential for Qt's signal/slot mechanism to work.

public:
    // Constructor: Initializes the FlightScheduleWindow.
    explicit FlightScheduleWindow(QWidget *parent = nullptr);
    // Destructor: Cleans up resources allocated by this class.
    ~FlightScheduleWindow();

    // Setter function to provide this window with a pointer to the MainWindow.
    // This allows FlightScheduleWindow to interact with (e.g., show) the MainWindow.
    void setMainWindow(MainWindow *window);

private slots:
    // Slot to handle the 'clicked' signal from the 'backButton' in the UI.
    void on_backButton_clicked();

private:
    Ui::FlightScheduleWindow *ui; // Pointer to the UI elements defined in the .ui file.
    MainWindow *mainWindow;       // Pointer to the main application window for navigation.

    // Private helper functions to encapsulate specific functionalities.
    void applyStyling();       // Applies custom CSS-like styling to the widgets.
    void setupScheduleTable(); // Configures the columns and headers of the QTableWidget.
    void loadFlightsFromCsv(const QString &filePath); // Loads flight schedules from a CSV file.
};

#endif // FLIGHTSCHEDULEWINDOW_H
