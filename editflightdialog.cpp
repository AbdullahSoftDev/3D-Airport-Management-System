#include "editflightdialog.h"
#include "ui_editflightdialog.h" // This header is generated by uic from your .ui file
#include <QMessageBox>          // For displaying warning/error messages
#include <QDebug>               // For printing debug messages to Qt Creator's Application Output

// Default constructor: Initializes the dialog without pre-filling any data.
EditFlightDialog::EditFlightDialog(QWidget *parent) :
    QDialog(parent), // Call the base class (QDialog) constructor
    ui(new Ui::EditFlightDialog) // Initialize the ui pointer
{
    ui->setupUi(this); // Set up all the widgets defined in your .ui file
    setWindowTitle("Edit Flight Details"); // Set the window title for the dialog

    // Connect the standard OK/Cancel buttons to the dialog's accept/reject slots.
    // This allows the dialog to close and return QDialog::Accepted or QDialog::Rejected.
    connect(ui->buttonBox, &QDialogButtonBox::accepted, this, &EditFlightDialog::accept);
    connect(ui->buttonBox, &QDialogButtonBox::rejected, this, &EditFlightDialog::reject);

    qDebug() << "EditFlightDialog default constructor called.";
}

// Overloaded constructor: Initializes the dialog and pre-fills its fields with existing flight data.
EditFlightDialog::EditFlightDialog(const QMap<QString, QString>& flightData, QWidget *parent) :
    QDialog(parent), // Call the base class (QDialog) constructor
    ui(new Ui::EditFlightDialog) // Initialize the ui pointer
{
    ui->setupUi(this); // Set up all the widgets defined in your .ui file
    setWindowTitle("Edit Flight Details"); // Set the window title for the dialog

    // Connect the standard OK/Cancel buttons
    connect(ui->buttonBox, &QDialogButtonBox::accepted, this, &EditFlightDialog::accept);
    connect(ui->buttonBox, &QDialogButtonBox::rejected, this, &EditFlightDialog::reject);

    setFlightData(flightData); // Call the helper function to pre-fill the input fields

    qDebug() << "EditFlightDialog constructor with data called.";
}

// Destructor: Cleans up dynamically allocated resources.
EditFlightDialog::~EditFlightDialog()
{
    delete ui; // Delete the ui object to free memory
    qDebug() << "EditFlightDialog destructor called.";
}

// Sets the input fields of the dialog with provided flight data.
void EditFlightDialog::setFlightData(const QMap<QString, QString>& flightData)
{
    // Set text for QLineEdit widgets
    ui->flightNumberLineEdit->setText(flightData.value("Flight Number"));
    ui->originLineEdit->setText(flightData.value("Origin"));
    ui->destinationLineEdit->setText(flightData.value("Destination"));
    ui->fareLineEdit->setText(flightData.value("Fare"));
    ui->availableSeatsLineEdit->setText(flightData.value("Available Seats"));

    // Set dates and times for QDateEdit/QTimeEdit widgets
    // It's crucial to use the correct format string ("M/d/yyyy" for date, "h:mm" for time)
    // that matches how you read/write dates/times from/to your CSV.
    ui->departureDateEdit->setDate(QDate::fromString(flightData.value("Departure Date"), "M/d/yyyy"));
    ui->departureTimeEdit->setTime(QTime::fromString(flightData.value("Departure Time"), "h:mm"));
    ui->arrivalDateEdit->setDate(QDate::fromString(flightData.value("Arrival Date"), "M/d/yyyy"));
    ui->arrivalTimeEdit->setTime(QTime::fromString(flightData.value("Arrival Time"), "h:mm"));

    // Typically, the flight number is a unique identifier and should not be changed during an edit.
    ui->flightNumberLineEdit->setReadOnly(true); // Make the field read-only
    ui->flightNumberLineEdit->setEnabled(false); // Visually disable it (greyed out)
}

// Retrieves the current data from the dialog's input fields.
QMap<QString, QString> EditFlightDialog::getFlightData()
{
    QMap<QString, QString> data; // Map to store the collected data

    // --- Input Validation ---
    // Check if essential text fields are empty.
    // Note: flightNumberLineEdit is read-only, so no need to check its emptiness here.
    if (ui->originLineEdit->text().trimmed().isEmpty() ||
        ui->destinationLineEdit->text().trimmed().isEmpty() ||
        ui->fareLineEdit->text().trimmed().isEmpty() ||
        ui->availableSeatsLineEdit->text().trimmed().isEmpty())
    {
        QMessageBox::warning(this, "Input Error", "Please fill in all required fields.");
        return QMap<QString, QString>(); // Return empty map to signal validation failure
    }

    // Validate Fare: must be a valid positive number.
    bool fareOk;
    double fare = ui->fareLineEdit->text().trimmed().toDouble(&fareOk);
    if (!fareOk || fare < 0) {
        QMessageBox::warning(this, "Input Error", "Please enter a valid positive number for Fare.");
        return QMap<QString, QString>();
    }

    // Validate Available Seats: must be a valid non-negative integer.
    bool seatsOk;
    int availableSeats = ui->availableSeatsLineEdit->text().trimmed().toInt(&seatsOk);
    if (!seatsOk || availableSeats < 0) {
        QMessageBox::warning(this, "Input Error", "Please enter a valid non-negative number for Available Seats.");
        return QMap<QString, QString>();
    }

    // --- Collect Data (if all validations pass) ---
    // Collect data from all input fields. The keys here should match your CSV headers.
    data["Flight Number"] = ui->flightNumberLineEdit->text().trimmed(); // Get the (read-only) flight number
    data["Origin"] = ui->originLineEdit->text().trimmed();
    data["Destination"] = ui->destinationLineEdit->text().trimmed();
    data["Departure Date"] = ui->departureDateEdit->date().toString("M/d/yyyy"); // Format date for CSV
    data["Departure Time"] = ui->departureTimeEdit->time().toString("h:mm");     // Format time for CSV
    data["Arrival Date"] = ui->arrivalDateEdit->date().toString("M/d/yyyy");
    data["Arrival Time"] = ui->arrivalTimeEdit->time().toString("h:mm");
    data["Fare"] = QString::number(fare, 'f', 2); // Format fare to 2 decimal places
    data["Available Seats"] = QString::number(availableSeats);

    qDebug() << "Flight data collected from EditFlightDialog:" << data;
    return data; // Return the map with the collected data
}
