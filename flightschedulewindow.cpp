#include "flightschedulewindow.h"
#include "ui_flightschedulewindow.h" // This header is generated by uic from flightschedulewindow.ui
#include "mainwindow.h"             // Needed to access MainWindow for navigation

// Constructor definition
FlightScheduleWindow::FlightScheduleWindow(QWidget *parent)
    : QWidget(parent) // Call the base class (QWidget) constructor
    , ui(new Ui::FlightScheduleWindow) // Initialize the ui pointer
{
    ui->setupUi(this); // Set up the UI elements defined in flightschedulewindow.ui
    mainWindow = nullptr; // Initialize the mainWindow pointer to null, will be set by MainWindow

    setWindowTitle("Flight Schedule"); // Set the window title
    applyStyling();       // Apply custom styling to widgets
    setupScheduleTable(); // Configure the flight schedule table

    // Connect the Back button signal to its slot
    connect(ui->backButton, &QPushButton::clicked, this, &FlightScheduleWindow::on_backButton_clicked);
    // Load initial flight schedules when the window is created
    loadFlightsFromCsv(AppPaths::getFlightsFilePath());
}

// Destructor definition
FlightScheduleWindow::~FlightScheduleWindow()
{
    delete ui; // Clean up the dynamically allocated UI object
}

// Method to receive and store a pointer to the MainWindow
void FlightScheduleWindow::setMainWindow(MainWindow *window)
{
    mainWindow = window;
}

// --- Private Helper Functions ---

// Applies custom CSS-like styling to the window and its widgets
void FlightScheduleWindow::applyStyling()
{
    this->setStyleSheet(
        "QWidget#FlightScheduleWindow { background-color: white; }" // Main window background is WHITE
        "QLabel { color: black; font-size: 24px; font-weight: bold; text-align: center; padding: 10px; }" // Make label more prominent
        "QPushButton {"
        "    background-color: lightgray;"
        "    color: black;"
        "    border: 1px solid #c0c0c0;"
        "    padding: 5px 15px;"
        "    border-radius: 3px;"
        "}"
        "QPushButton:hover { background-color: #d0d0d0; }"
        "QPushButton:pressed { background-color: #c0c0c0; }"
        );

    // Styling for table headers (horizontal and vertical)
    QString tableHeaderStyle =
        "QHeaderView::section {"
        "    background-color: lightgray;"
        "    color: black;"
        "    padding: 6px;"
        "    border: 1px solid #c0c0c0;"
        "    font-weight: bold;"
        "}"
        "QHeaderView::section:hover { background-color: #d0d0d0; }"
        "QHeaderView::section:pressed { background-color: #c0c0c0; }";

    ui->scheduleTableWidget->horizontalHeader()->setStyleSheet(tableHeaderStyle);
    ui->scheduleTableWidget->verticalHeader()->setStyleSheet(tableHeaderStyle);

    // Styling for table contents (cells)
    QString tableContentStyle =
        "QTableWidget {"
        "    background-color: lightgray;"
        "    gridline-color: #e0e0e0;"
        "    border: 1px solid #a0a0a0;"
        "    alternate-background-color: #f5f5f5;"
        "}"
        "QTableWidget::item {"
        "    padding: 4px;"
        "    color: black;"
        "    background-color: white;"
        "    border: 1px solid #e0e0e0;"
        "}"
        "QTableWidget::item:selected {"
        "    background-color: #d0e0ff;"
        "    color: black;"
        "}"
        "QTableCornerButton::section {"
        "    background-color: lightgray;"
        "    border: 1px solid #c0c0c0;"
        "}";

    ui->scheduleTableWidget->setStyleSheet(tableContentStyle);
}

// Configures the columns and headers of the QTableWidget for flight schedules
void FlightScheduleWindow::setupScheduleTable()
{
    ui->scheduleTableWidget->setColumnCount(7); // Matches the 7 columns in your Passenger_BookTicket table
    QStringList headers;
    headers << "Flight Number" << "Origin" << "Destination" << "Departure Time"
            << "Arrival Time" << "Available Seats" << "Fare";
    ui->scheduleTableWidget->setHorizontalHeaderLabels(headers);
    ui->scheduleTableWidget->setSelectionBehavior(QAbstractItemView::SelectRows);
    ui->scheduleTableWidget->setSelectionMode(QAbstractItemView::NoSelection); // No selection needed for display
    ui->scheduleTableWidget->setEditTriggers(QAbstractItemView::NoEditTriggers); // Make table read-only
    ui->scheduleTableWidget->horizontalHeader()->setSectionResizeMode(QHeaderView::ResizeToContents);
    // You might want to stretch the last section to fill the remaining space if there is any
    ui->scheduleTableWidget->horizontalHeader()->setStretchLastSection(true);
}

// Loads flight schedules from a CSV file
void FlightScheduleWindow::loadFlightsFromCsv(const QString &filePath)
{
    QFile file(filePath);
    if (!file.open(QIODevice::ReadOnly | QIODevice::Text)) {
        QMessageBox::critical(this, "File Error", "Could not load flight data for schedule. Please ensure 'flights.csv' exists and is accessible.");
        qWarning() << "Error: Could not open file:" << filePath << "-" << file.errorString();
        return;
    }

    QTextStream in(&file);
    ui->scheduleTableWidget->setRowCount(0); // Clear existing rows

    if (!in.atEnd()) {
        in.readLine(); // Skip header row
    }

    int row = 0;
    while (!in.atEnd()) {
        QString line = in.readLine();
        QStringList fields = line.split(',');

        // As determined previously, your CSV has 9 fields
        // 0: Flight Number, 1: Origin, 2: Destination, 3: Departure Date, 4: Departure Time,
        // 5: Arrival Date, 6: Arrival Time, 7: Fare, 8: Available Seats
        const int EXPECTED_FLIGHT_COLUMNS = 9;
        if (fields.size() == EXPECTED_FLIGHT_COLUMNS) {
            ui->scheduleTableWidget->insertRow(row);

            // Map CSV columns (0-indexed) to TableWidget columns (0-indexed)
            ui->scheduleTableWidget->setItem(row, 0, new QTableWidgetItem(fields.at(0).trimmed())); // Flight Number
            ui->scheduleTableWidget->setItem(row, 1, new QTableWidgetItem(fields.at(1).trimmed())); // Origin
            ui->scheduleTableWidget->setItem(row, 2, new QTableWidgetItem(fields.at(2).trimmed())); // Destination

            // Combine Date and Time for Departure (fields.at(3) and fields.at(4))
            QString departureDateTime = fields.at(3).trimmed() + " " + fields.at(4).trimmed();
            ui->scheduleTableWidget->setItem(row, 3, new QTableWidgetItem(departureDateTime)); // Departure Time

            // Combine Date and Time for Arrival (fields.at(5) and fields.at(6))
            QString arrivalDateTime = fields.at(5).trimmed() + " " + fields.at(6).trimmed();
            ui->scheduleTableWidget->setItem(row, 4, new QTableWidgetItem(arrivalDateTime)); // Arrival Time

            ui->scheduleTableWidget->setItem(row, 5, new QTableWidgetItem(fields.at(8).trimmed())); // Available Seats (9th column in CSV)
            ui->scheduleTableWidget->setItem(row, 6, new QTableWidgetItem(fields.at(7).trimmed())); // Fare (8th column in CSV)

            row++;
        } else {
            qWarning() << "Warning: Skipping malformed flight row in schedule due to incorrect field count (" << fields.size() << " instead of " << EXPECTED_FLIGHT_COLUMNS << "):" << line;
        }
    }

    file.close();
    ui->scheduleTableWidget->resizeColumnsToContents(); // Resize columns to fit content
}

// --- Slot Implementations ---

// Slot for the 'Back' button click
void FlightScheduleWindow::on_backButton_clicked()
{
    if (mainWindow) {
        mainWindow->show(); // Show the main window
        this->hide();       // Hide the current window
        qDebug() << "Navigating back to Main Window from Flight Schedule.";
    } else {
        QMessageBox::warning(this, "Navigation Error", "Cannot go back: Main Window not accessible.");
        qDebug() << "Error: MainWindow pointer not set in FlightScheduleWindow!";
    }
}
