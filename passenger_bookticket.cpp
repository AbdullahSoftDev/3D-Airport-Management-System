#include "passenger_bookticket.h"
#include "ui_passenger_bookticket.h" // This header is generated by uic from passenger_bookticket.ui
#include "mainwindow.h"             // Include your MainWindow header so we can access its methods/pointers
#include <QDate>
#include <QMessageBox>
#include <QDateTime>
#include <QDebug>
#include <QFile>
#include <QTextStream>
#include <QHeaderView>
#include <QRandomGenerator> // Added for generateBookingId()
#include "AppPaths.h"       // Include AppPaths to get file paths

// Global stylesheet for QMessageBox to ensure consistent appearance
const QString globalMessageBoxStyle =
    "QMessageBox {"
    "    background-color: white;" // White background for the message box
    "}"
    "QMessageBox QLabel {"
    "    color: black;" // Black text color for the message
    "}"
    "QMessageBox QPushButton {"
    "    background-color: #E0E0E0;" // Light gray for buttons
    "    color: black;"             // Black text for button labels (e.g., "OK")
    "    border: 1px solid #A0A0A0;" // A subtle border
    "    padding: 5px 15px;"       // Padding inside the button
    "    border-radius: 3px;"      // Slightly rounded corners
    "}"
    "QMessageBox QPushButton:hover { background-color: #D0D0D0; }" // Slightly darker on hover
    "QMessageBox QPushButton:pressed { background-color: #C0C0C0; }";

// Constructor definition
Passenger_BookTicket::Passenger_BookTicket(QWidget *parent)
    : QWidget(parent) // Call the base class (QWidget) constructor
    , ui(new Ui::Passenger_BookTicket) // Initialize the ui pointer
{
    ui->setupUi(this); // Set up the UI elements defined in passenger_bookticket.ui
    mainWindow = nullptr; // Initialize the mainWindow pointer to null

    setWindowTitle("Book Ticket"); // Set the window title

    applyStyling(); // Apply custom styling to widgets

    setupFlightsTable();        // Configure the available flights table
    setupSelectedFlightTable(); // Configure the selected flight table

    // Connect signals from UI widgets to our slots
    connect(ui->backButton_Passenger, &QPushButton::clicked, this, &Passenger_BookTicket::on_backButton_Passenger_clicked);
    //connect(ui->bookTicketButton_Passenger, &QPushButton::clicked, this, &Passenger_BookTicket::on_bookTicketButton_Passenger_clicked); // Connected the book ticket button
    connect(ui->availableFlightsTableWidget_Passenger, &QTableWidget::itemSelectionChanged,
            this, &Passenger_BookTicket::on_availableFlightsTableWidget_Passenger_itemSelectionChanged);
    // QOverload is used for overloaded signals, like valueChanged which has multiple versions
    connect(ui->numTicketsSpinBox_Passenger, QOverload<int>::of(&QSpinBox::valueChanged),
            this, &Passenger_BookTicket::on_numTicketsSpinBox_Passenger_valueChanged);

    // Set initial date for the date selector and enable calendar popup
    ui->flightDateSelection_Passenger->setDate(QDate::currentDate());
    ui->flightDateSelection_Passenger->setCalendarPopup(true);

    // Load flight data from CSV when the window is initialized using AppPaths
    loadFlightsFromCsv(AppPaths::getFlightsFilePath());
}

// Destructor definition
Passenger_BookTicket::~Passenger_BookTicket()
{
    delete ui; // Clean up the dynamically allocated UI object
}

// Method to receive and store a pointer to the MainWindow
void Passenger_BookTicket::setMainWindow(MainWindow *window)
{
    mainWindow = window;
}

// Apply custom styling to the window and its widgets
void Passenger_BookTicket::applyStyling()
{
    this->setStyleSheet(
        "QWidget#Passenger_BookTicket { background-color: white; }" // Main window background
        "QLabel { color: black; }"                                 // Default label color
        "QPushButton {"
        "    background-color: lightgray;"
        "    color: black;"
        "    border: 1px solid #c0c0c0;"
        "    padding: 5px 15px;"
        "    border-radius: 3px;"
        "}"
        "QPushButton:hover { background-color: #d0d0d0; }"
        "QPushButton:pressed { background-color: #c0c0c0; }"
        "QLineEdit {"
        "    background-color: white;"
        "    color: black;"
        "    border: 1px solid #a0a0a0;"
        "    padding: 5px;"
        "    border-radius: 3px;"
        "}"
        "QSpinBox {"
        "    background-color: white;"
        "    color: black;"
        "    border: 1px solid #a0a0a0;"
        "    padding: 5px;"
        "    border-radius: 3px;"
        "}"
        "QDateEdit {"
        "    background-color: white;"
        "    color: black;"
        "    border: 1px solid #a0a0a0;"
        "    padding: 5px;"
        "    border-radius: 3px;"
        "    selection-background-color: #d0e0ff;" // Color when date is selected in calendar
        "    selection-color: black;"
        "}"
        );

    // Styling for table headers
    QString tableHeaderStyle =
        "QHeaderView::section {"
        "    background-color: lightgray;"
        "    color: black;"
        "    padding: 6px;"
        "    border: 1px solid #c0c0c0;"
        "    font-weight: bold;"
        "}"
        "QHeaderView::section:hover { background-color: #d0d0d0; }"
        "QHeaderView::section:pressed { background-color: #c0c0c0; }";

    ui->availableFlightsTableWidget_Passenger->horizontalHeader()->setStyleSheet(tableHeaderStyle);
    ui->availableFlightsTableWidget_Passenger->verticalHeader()->setStyleSheet(tableHeaderStyle);
    ui->Showselectedflight->horizontalHeader()->setStyleSheet(tableHeaderStyle);
    ui->Showselectedflight->verticalHeader()->setStyleSheet(tableHeaderStyle);

    // Styling for table contents
    QString tableContentStyle =
        "QTableWidget {"
        "    background-color: lightgray;" // Overall table background
        "    gridline-color: #e0e0e0;"    // Color of lines between cells
        "    border: 1px solid #a0a0a0;"
        "    alternate-background-color: #f5f5f5;" // For alternating row colors
        "}"
        "QTableWidget::item {"
        "    padding: 4px;"
        "    color: black;"
        "    background-color: white;" // Cell background for unselected items
        "    border: 1px solid #e0e0e0;"
        "}"
        "QTableWidget::item:selected {"
        "    background-color: #d0e0ff;" // Desired light blue selection color
        "    color: black;"              // Change text to black for better contrast on light blue
        "}"
        "QTableWidget::indicator:selected {"
        "    background-color: #d0e0ff;"   // Ensure indicator matches selected item
        "}"
        "QTableCornerButton::section {"
        "    background-color: lightgray;"
        "    border: 1px solid #c0c0c0;"
        "}";

    ui->availableFlightsTableWidget_Passenger->setStyleSheet(tableContentStyle);
    ui->Showselectedflight->setStyleSheet(tableContentStyle);
}

// Setup columns and headers for the available flights table
void Passenger_BookTicket::setupFlightsTable()
{
    ui->availableFlightsTableWidget_Passenger->setColumnCount(7); // 7 columns as per your UI
    QStringList headers;
    headers << "Flight Number"
            << "Origin"
            << "Destination"
            << "Departure Time"
            << "Arrival Time"
            << "Available Seats"
            << "Fare";
    ui->availableFlightsTableWidget_Passenger->setHorizontalHeaderLabels(headers);
    // Allow selecting full rows
    ui->availableFlightsTableWidget_Passenger->setSelectionBehavior(QAbstractItemView::SelectRows);
    // Allow only single row selection
    ui->availableFlightsTableWidget_Passenger->setSelectionMode(QAbstractItemView::SingleSelection);
    // Make table non-editable by user
    ui->availableFlightsTableWidget_Passenger->setEditTriggers(QAbstractItemView::NoEditTriggers);
    // Resize columns to fit content
    ui->availableFlightsTableWidget_Passenger->horizontalHeader()->setSectionResizeMode(QHeaderView::ResizeToContents);
}

// Setup columns and headers for the selected flight display table
void Passenger_BookTicket::setupSelectedFlightTable()
{
    ui->Showselectedflight->setColumnCount(7); // 7 columns
    QStringList headers;
    headers << "Flight Number"
            << "Origin"
            << "Destination"
            << "Departure Time"
            << "Arrival Time"
            << "Seats"
            << "Total Fare"; // Headers for this table
    ui->Showselectedflight->setHorizontalHeaderLabels(headers);
    ui->Showselectedflight->setEditTriggers(QAbstractItemView::NoEditTriggers);
    ui->Showselectedflight->setRowCount(0); // Start with 0 rows
    ui->Showselectedflight->horizontalHeader()->setSectionResizeMode(QHeaderView::ResizeToContents);
}

// Load flight data from a CSV file into the available flights table
void Passenger_BookTicket::loadFlightsFromCsv(const QString &filePath)
{
    QFile file(filePath);
    // Try to open the file in read-only text mode
    if (!file.open(QIODevice::ReadOnly | QIODevice::Text)) {
        QMessageBox msgBox(this); // Create a QMessageBox object
        msgBox.setWindowTitle("File Error");
        msgBox.setText("Could not load flight data. Please ensure 'flights.csv' exists and is accessible.");
        msgBox.setIcon(QMessageBox::Critical); // Set the icon (Critical, Warning, Information, Question)
        msgBox.setStyleSheet(globalMessageBoxStyle); // Apply the globally defined stylesheet
        msgBox.exec(); // Show the message box
        qWarning() << "Error: Could not open file:" << filePath << "-" << file.errorString();
        return;
    }

    QTextStream in(&file);
    ui->availableFlightsTableWidget_Passenger->setRowCount(0); // Clear existing rows

    if (!in.atEnd()) {
        in.readLine(); // Skip the header row of the CSV file
    }

    int row = 0;
    while (!in.atEnd()) {
        QString line = in.readLine();
        QStringList fields = line.split(',');

        // We expect 9 columns in the CSV:
        // 0: Flight Number, 1: Origin, 2: Destination,
        // 3: Departure Date, 4: Departure Time,
        // 5: Arrival Date, 6: Arrival Time,
        // 7: Fare, 8: Available Seats
        const int EXPECTED_FLIGHT_COLUMNS = 9;
        if (fields.size() == EXPECTED_FLIGHT_COLUMNS) {
            ui->availableFlightsTableWidget_Passenger->insertRow(row); // Insert new row

            // Populate table widgets with data from CSV fields
            ui->availableFlightsTableWidget_Passenger->setItem(row, 0, new QTableWidgetItem(fields.at(0).trimmed())); // Flight Number
            ui->availableFlightsTableWidget_Passenger->setItem(row, 1, new QTableWidgetItem(fields.at(1).trimmed())); // Origin
            ui->availableFlightsTableWidget_Passenger->setItem(row, 2, new QTableWidgetItem(fields.at(2).trimmed())); // Destination

            // Combine Date and Time fields for Departure and Arrival for display
            QString departureDateTime = fields.at(3).trimmed() + " " + fields.at(4).trimmed();
            ui->availableFlightsTableWidget_Passenger->setItem(row, 3, new QTableWidgetItem(departureDateTime)); // Departure Time

            QString arrivalDateTime = fields.at(5).trimmed() + " " + fields.at(6).trimmed();
            ui->availableFlightsTableWidget_Passenger->setItem(row, 4, new QTableWidgetItem(arrivalDateTime)); // Arrival Time - Corrected!

            ui->availableFlightsTableWidget_Passenger->setItem(row, 5, new QTableWidgetItem(fields.at(8).trimmed())); // Available Seats (last column in CSV)
            ui->availableFlightsTableWidget_Passenger->setItem(row, 6, new QTableWidgetItem(fields.at(7).trimmed())); // Fare (second to last in CSV)

            row++; // Move to next row
        } else {
            // Log a warning if a row doesn't have the expected number of columns
            qWarning() << "Warning: Skipping malformed flight row due to incorrect field count (" << fields.size() << " instead of " << EXPECTED_FLIGHT_COLUMNS << "):" << line;
        }
    }

    file.close(); // Close the CSV file
    ui->availableFlightsTableWidget_Passenger->resizeColumnsToContents(); // Adjust column widths
}
// Update the display of the currently selected flight in the lower table
void Passenger_BookTicket::updateSelectedFlightDisplay()
{
    ui->Showselectedflight->setRowCount(0); // Clear the previous selection display

    QList<QTableWidgetItem *> selectedItems = ui->availableFlightsTableWidget_Passenger->selectedItems();
    if (selectedItems.isEmpty()) {
        return; // No flight selected
    }

    int selectedRow = selectedItems.first()->row(); // Get the row index of the selected item

    // Retrieve data from the selected row in the available flights table
    QString flightNumber = ui->availableFlightsTableWidget_Passenger->item(selectedRow, 0)->text();
    QString origin = ui->availableFlightsTableWidget_Passenger->item(selectedRow, 1)->text();
    QString destination = ui->availableFlightsTableWidget_Passenger->item(selectedRow, 2)->text();
    QString departureTime = ui->availableFlightsTableWidget_Passenger->item(selectedRow, 3)->text();
    QString arrivalTime = ui->availableFlightsTableWidget_Passenger->item(selectedRow, 4)->text();
    double fare = ui->availableFlightsTableWidget_Passenger->item(selectedRow, 6)->text().toDouble();

    int numTickets = ui->numTicketsSpinBox_Passenger->value(); // Get number of tickets from spin box
    double totalFare = fare * numTickets;                       // Calculate total fare

    ui->Showselectedflight->insertRow(0); // Insert a new row in the selected flight table

    // Populate the selected flight table
    ui->Showselectedflight->setItem(0, 0, new QTableWidgetItem(flightNumber));
    ui->Showselectedflight->setItem(0, 1, new QTableWidgetItem(origin));
    ui->Showselectedflight->setItem(0, 2, new QTableWidgetItem(destination));
    ui->Showselectedflight->setItem(0, 3, new QTableWidgetItem(departureTime));
    ui->Showselectedflight->setItem(0, 4, new QTableWidgetItem(arrivalTime));
    ui->Showselectedflight->setItem(0, 5, new QTableWidgetItem(QString::number(numTickets)));
    ui->Showselectedflight->setItem(0, 6, new QTableWidgetItem(QString::number(totalFare, 'f', 2))); // Format fare to 2 decimal places

    ui->Showselectedflight->resizeColumnsToContents(); // Adjust column widths
}

// Slot: Called when the selection in the available flights table changes
void Passenger_BookTicket::on_availableFlightsTableWidget_Passenger_itemSelectionChanged()
{
    updateSelectedFlightDisplay(); // Update the selected flight information
}

// Slot: Called when the number of tickets in the spin box changes
void Passenger_BookTicket::on_numTicketsSpinBox_Passenger_valueChanged(int value)
{
    Q_UNUSED(value); // Indicate that 'value' parameter is intentionally unused
    updateSelectedFlightDisplay(); // Update the selected flight information based on new ticket count
}

// Generate a unique booking ID
QString Passenger_BookTicket::generateBookingId()
{
    QDateTime currentDateTime = QDateTime::currentDateTime();
    QString timestamp = currentDateTime.toString("yyyyMMddHHmmsszzz"); // Current date/time with milliseconds
    quint32 randomNumber = QRandomGenerator::global()->generate();      // Random number

    // Combine timestamp and random number for uniqueness
    return QString("BK%1%2").arg(timestamp).arg(randomNumber);
}

// Save ticket details to a CSV file
bool Passenger_BookTicket::saveTicketToCsv(const QString &filePath, const QString &bookingId,
                                           const QString &flightNumber, const QString &passengerName,
                                           const QString &contactNumber, const QString &bookingDateTime,
                                           int seatsBooked, double totalFare, const QString &status)
{
    QFile file(filePath);
    // Open file in Append mode (adds to end) and Text mode
    if (!file.open(QIODevice::Append | QIODevice::Text)) {
        qWarning() << "Error: Could not open tickets.csv for appending:" << file.errorString();
        return false;
    }

    QTextStream out(&file);
    QString formattedFare = QString::number(totalFare, 'f', 2); // Format total fare

    // Write all ticket details as a comma-separated line
    out << bookingId << "," << flightNumber << "," << passengerName << "," << contactNumber << ","
        << bookingDateTime << "," << seatsBooked << "," << formattedFare << "," << status << "\n";

    file.close();
    return true;
}

// Update available seats for a flight in the flights CSV file
bool Passenger_BookTicket::updateFlightSeatsInCsv(const QString &flightNumberToUpdate, int seatsToDeduct)
{
    // Use AppPaths to get the flights file path
    const QString filePath = AppPaths::getFlightsFilePath();
    QFile file(filePath);
    QFile tempFile(filePath + ".tmp"); // Use a temporary file for atomic update

    // Open original file for reading
    if (!file.open(QIODevice::ReadOnly | QIODevice::Text)) {
        qWarning() << "Error: Could not open flights.csv for reading:" << file.errorString();
        return false;
    }
    // Open temporary file for writing
    if (!tempFile.open(QIODevice::WriteOnly | QIODevice::Text)) {
        qWarning() << "Error: Could not create temporary file for flights.csv:" << tempFile.errorString();
        file.close(); // Close original file before returning
        return false;
    }

    QTextStream in(&file);
    QTextStream out(&tempFile);

    // Write header row to temp file first
    if (!in.atEnd()) {
        out << in.readLine() << "\n";
    }

    bool updated = false;
    while (!in.atEnd()) {
        QString line = in.readLine();
        QStringList fields = line.split(',');

        // Check for 9 columns and if it's the target flight
        const int EXPECTED_FLIGHT_COLUMNS_FOR_UPDATE = 9;
        if (fields.size() == EXPECTED_FLIGHT_COLUMNS_FOR_UPDATE && fields.at(0).trimmed() == flightNumberToUpdate) {
            // Available Seats are at index 8 (the 9th column in a 0-indexed list)
            int currentSeats = fields.at(8).trimmed().toInt();
            if (currentSeats >= seatsToDeduct) {
                int newSeats = currentSeats - seatsToDeduct;
                fields[8] = QString::number(newSeats); // Update the seats field
                out << fields.join(',') << "\n";        // Write the modified line
                updated = true;
            } else {
                // If not enough seats, write original line and warn
                out << line << "\n";
                qWarning() << "Warning: Not enough seats for flight" << flightNumberToUpdate << ". Booking might fail.";
            }
        } else {
            out << line << "\n"; // Write line as is if not the target flight or malformed
        }
    }

    file.close();
    tempFile.close();

    if (updated) {
        // Replace original file with temporary file
        if (file.remove()) { // Remove the original file
            if (tempFile.rename(filePath)) { // Rename temp file to original
                qDebug() << "Successfully updated seats for flight" << flightNumberToUpdate << ".";
                return true;
            } else {
                qWarning() << "Error: Could not rename temporary file to original:" << tempFile.errorString();
            }
        } else {
            qWarning() << "Error: Could not remove original flights.csv:" << file.errorString();
        }
    } else {
        qWarning() << "Flight" << flightNumberToUpdate << "not found or seats not updated (e.g., insufficient seats).";
    }

    tempFile.remove(); // Clean up temp file if something went wrong
    return false;
}

// Slot: Handles the "Book" button click
void Passenger_BookTicket::on_bookTicketButton_Passenger_clicked()
{
    QList<QTableWidgetItem *> selectedItems = ui->availableFlightsTableWidget_Passenger->selectedItems();
    if (selectedItems.isEmpty()) {
        QMessageBox msgBox(this);
        msgBox.setWindowTitle("Booking Error");
        msgBox.setText("Please select a flight first.");
        msgBox.setIcon(QMessageBox::Warning);
        msgBox.setStyleSheet(globalMessageBoxStyle);
        msgBox.exec();
        return;
    }

    QString passengerName = ui->passengerNameLineEdit_Passenger->text().trimmed();
    if (passengerName.isEmpty()) {
        QMessageBox msgBox(this);
        msgBox.setWindowTitle("Booking Error");
        msgBox.setText("Please Enter your name.");
        msgBox.setIcon(QMessageBox::Warning);
        msgBox.setStyleSheet(globalMessageBoxStyle);
        msgBox.exec();
        return;
    }

    // You might want to add a QLineEdit for contact number in your UI if you need user input for it
    QString contactNumber = "N/A"; // Placeholder for now, consider adding a UI field for it

    int numTickets = ui->numTicketsSpinBox_Passenger->value();
    if (numTickets <= 0) {
        QMessageBox msgBox(this);
        msgBox.setWindowTitle("Booking Error");
        msgBox.setText("Number of tickets must be at least 1");
        msgBox.setIcon(QMessageBox::Warning);
        msgBox.setStyleSheet(globalMessageBoxStyle);
        msgBox.exec();
        return; // Corrected: Removed redundant return
    }

    int selectedRow = selectedItems.first()->row();
    QString flightNumber = ui->availableFlightsTableWidget_Passenger->item(selectedRow, 0)->text();
    QString availableSeatsStr = ui->availableFlightsTableWidget_Passenger->item(selectedRow, 5)->text();
    QString fareStr = ui->availableFlightsTableWidget_Passenger->item(selectedRow, 6)->text();

    int availableSeats = availableSeatsStr.toInt();
    double farePerTicket = fareStr.toDouble();

    if (numTickets > availableSeats) {
        QMessageBox::warning(this, "Booking Error",
                             QStringLiteral("Not enough seats available for Flight %1. Only %2 seats left.")
                                 .arg(flightNumber)
                                 .arg(availableSeats));
        return;
    }

    QString bookingId = generateBookingId();
    double totalFare = numTickets * farePerTicket;
    QString bookingDateTime = QDateTime::currentDateTime().toString("yyyy-MM-dd HH:mm:ss");

    // First, try to update the flight seats in flights.csv
    if (!updateFlightSeatsInCsv(flightNumber, numTickets)) {
        QMessageBox::critical(this, "Booking Failed", "Failed to update flight seat availability. This might be due to insufficient seats or file access issues. Please try again.");
        return;
    }

    // If seats were updated successfully, proceed to save the ticket
    // Use AppPaths to get the tickets file path
    if (saveTicketToCsv(AppPaths::getTicketsFilePath(),
                        bookingId, flightNumber, passengerName, contactNumber,
                        bookingDateTime, numTickets, totalFare, "Booked")) {

        QMessageBox msgBox(this);
        msgBox.setText(QStringLiteral("Your ticket has been booked!\n"
                                      "Booking ID: %1\n"
                                      "Flight: %2\n"
                                      "Passenger: %3\n"
                                      "Tickets: %4\n"
                                      "Total Fare: %.2f")
                           .arg(bookingId)
                           .arg(flightNumber)
                           .arg(passengerName)
                           .arg(numTickets)
                           .arg(totalFare, 0, 'f', 2));

        msgBox.setWindowTitle("Booking Successful");
        msgBox.setIcon(QMessageBox::Information);
        // Apply the globally defined stylesheet for consistency
        msgBox.setStyleSheet(globalMessageBoxStyle);
        msgBox.exec();

        // Clear UI fields and reload data to reflect changes
        ui->passengerNameLineEdit_Passenger->clear();
        ui->numTicketsSpinBox_Passenger->setValue(1);
        // Reload available flights using AppPaths
        loadFlightsFromCsv(AppPaths::getFlightsFilePath());
        ui->Showselectedflight->setRowCount(0); // Clear selected flight display
    } else {
        // If saving the ticket fails, you might want to consider rolling back the seat deduction.
        QMessageBox::critical(this, "Booking Failed", "Failed to save ticket details. Please contact support. Flight seats might have been deducted.");
    }
}

// Slot: Handles the "Back" button click
void Passenger_BookTicket::on_backButton_Passenger_clicked()
{
    if (mainWindow) {
        mainWindow->show(); // Show the main window
        this->hide();        // Hide the current window
        qDebug() << "Navigating back to Main Window from Passenger Book Ticket.";
    } else {
        QMessageBox::warning(this, "Navigation Error", "Cannot go back: Main Window not accessible.");
        qDebug() << "Error: MainWindow pointer not set in Passenger_BookTicket!";
    }
}
