#ifndef PASSENGER_BOOKTICKET_H
#define PASSENGER_BOOKTICKET_H

#include <QWidget>
#include <QTableWidget>     // For QTableWidget
#include <QTableWidgetItem> // For QTableWidgetItem
#include <QMessageBox>      // For QMessageBox
#include <QDate>            // For QDate
#include <QDateTime>        // For QDateTime
#include <QFile>            // For QFile
#include <QTextStream>      // For QTextStream
#include <QDebug>           // For qDebug()
#include <QRandomGenerator> // For QRandomGenerator
#include <QHeaderView>      // For QHeaderView (used in styling)

// Forward declaration of MainWindow
// This tells the compiler that MainWindow is a class,
// without needing its full definition yet, avoiding circular includes.
class MainWindow;

namespace Ui {
// Forward declaration for the UI class generated by uic
// This allows you to use Ui::Passenger_BookTicket* ui;
class Passenger_BookTicket;
}

class Passenger_BookTicket : public QWidget
{
    Q_OBJECT // Required for signals and slots to work

public:
    // Constructor: Takes an optional parent widget.
    explicit Passenger_BookTicket(QWidget *parent = nullptr);
    // Destructor: Cleans up dynamically allocated resources (like 'ui').
    ~Passenger_BookTicket();

    // Method to set a pointer back to the MainWindow
    void setMainWindow(MainWindow *window);

private slots:
    // Slot connected to the 'backButton_Passenger'
    void on_backButton_Passenger_clicked();
    // Slot connected to the 'bookTicketButton_Passenger'
    void on_bookTicketButton_Passenger_clicked();
    // Slot connected when selection changes in the available flights table
    void on_availableFlightsTableWidget_Passenger_itemSelectionChanged();
    // Slot connected when the value in the spin box changes
    void on_numTicketsSpinBox_Passenger_valueChanged(int value);

private:
    Ui::Passenger_BookTicket *ui; // Pointer to the UI object generated by uic
    MainWindow *mainWindow;       // Pointer to the MainWindow for navigation

    // Helper functions for setup and logic
    void applyStyling();
    void setupFlightsTable();
    void setupSelectedFlightTable();
    void loadFlightsFromCsv(const QString &filePath);
    void updateSelectedFlightDisplay();
    QString generateBookingId();
    bool saveTicketToCsv(const QString &filePath, const QString &bookingId,
                         const QString &flightNumber, const QString &passengerName,
                         const QString &contactNumber, const QString &bookingDateTime,
                         int seatsBooked, double totalFare, const QString &status);
    bool updateFlightSeatsInCsv(const QString &flightNumber, int seatsToDeduct);
};

#endif // PASSENGER_BOOKTICKET_H
