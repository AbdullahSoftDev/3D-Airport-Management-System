#include "manageusersview.h" // Include the header for this class
#include "ui_manageusersview.h" // Generated by Qt from manageusersview.ui
#include "userdialog.h"      // Include the UserDialog for add/edit operations
#include "AppPaths.h"        // Essential: Include your AppPaths class

// Required for file operations, QMessageBox, and debugging
#include <QFile>
#include <QTextStream>
#include <QMessageBox>
#include <QDebug>
// QDir and QFileInfo are still useful, but less for direct path manipulation now
#include <QDir>
#include <QFileInfo>

// The USERS_FILE_PATH constant/macro is no longer needed or defined here.
// All paths will now be retrieved dynamically using AppPaths.

ManageUsersView::ManageUsersView(QWidget *parent) :
    QWidget(parent), // Call the base class constructor
    ui(new Ui::ManageUsersView) // Initialize the 'ui' pointer
{
    ui->setupUi(this); // Set up the UI components from manageusersview.ui
    setWindowTitle("Manage Administrators"); // Set the window title

    applyTableStyling(); // Apply predefined styling to the table

    // --- Configure the QTableWidget ---
    ui->usersTableWidget->setSelectionBehavior(QAbstractItemView::SelectRows); // Select entire rows when clicked
    ui->usersTableWidget->setSelectionMode(QAbstractItemView::SingleSelection); // Only one row can be selected at a time
    ui->usersTableWidget->setEditTriggers(QAbstractItemView::NoEditTriggers); // Make table cells read-only
    ui->usersTableWidget->setColumnCount(2); // We have two columns: Username and Password
    QStringList headerLabels;
    headerLabels << "Username" << "Password"; // Define column headers
    ui->usersTableWidget->setHorizontalHeaderLabels(headerLabels);
    // Stretch columns to fill the available width evenly
    ui->usersTableWidget->horizontalHeader()->setSectionResizeMode(QHeaderView::Stretch);
    ui->usersTableWidget->setAlternatingRowColors(true); // Enable alternating row colors for better readability

    // --- Connect buttons to their respective slots ---
    // These connections were commented out in your provided code; leaving them commented
    // as per your "dont uncomment any extra thing" instruction, assuming you connect
    // them via Qt Designer's auto-connect feature. If not, you'll need to uncomment them.
    // connect(ui->addAdminButton, &QPushButton::clicked, this, &ManageUsersView::on_addAdminButton_clicked);
    // connect(ui->editAdminButton, &QPushButton::clicked, this, &ManageUsersView::on_editAdminButton_clicked);
    // connect(ui->removeAdminButton, &QPushButton::clicked, this, &ManageUsersView::on_removeAdminButton_clicked);

    QString buttonStyle =
        "QPushButton {"
        "   background-color: white;"      // Default background: white
        "   color: black;"                 // Default text: black
        "   border: 1px solid #333;"        // 1px solid black-ish outline
        "   border-radius: 5px;"            // Slightly rounded corners
        "   padding: 5px 10px;"             // Padding for better look
        "   font-weight: bold;"
        "   font-size: 10px;"               // Adjust font size as needed
        "}"
        "QPushButton:hover,"                // On hover
        "QPushButton:pressed {"             // On pressed (clicked)
        "   background-color: #FD5800;"     // Orange background
        "   color: black;"                 // Black text on orange
        "   border: 1px solid #FD5800;"     // Border matches background on hover/pressed
        "}";
    ui->addAdminButton->setStyleSheet(buttonStyle);
    ui->editAdminButton->setStyleSheet(buttonStyle);
    ui->removeAdminButton->setStyleSheet(buttonStyle);
    // Load initial data when the view is created
    loadUsers();

    qDebug() << "ManageUsersView created.";
}

// --- Destructor ---
ManageUsersView::~ManageUsersView()
{
    delete ui; // Clean up the dynamically allocated Ui::ManageUsersView object
    qDebug() << "ManageUsersView destroyed.";
}

// --- Helper function to apply styling to the table ---
void ManageUsersView::applyTableStyling()
{
    QString tableHeaderStyle =
        "QHeaderView::section {"
        "   background-color: #f0f0f0;" // Lighter gray for headers
        "   color: black;"
        "   padding: 6px;"
        "   border: 1px solid #c0c0c0;"
        "   font-weight: bold;"
        "}"
        "QHeaderView::section:hover { background-color: #e0e0e0; }" // Slightly darker on hover
        "QHeaderView::section:pressed { background-color: #d0d0d0; }"; // Even darker on press

    ui->usersTableWidget->horizontalHeader()->setStyleSheet(tableHeaderStyle);
    ui->usersTableWidget->verticalHeader()->setStyleSheet(tableHeaderStyle);

    QString tableContentStyle =
        "QTableWidget {"
        "   background-color: white;"
        "   gridline-color: #e0e0e0;" // Light gray grid lines
        "   border: 1px solid #a0a0a0;" // Slightly darker border for the whole table
        "   alternate-background-color: #f5f5f5;" // Very light gray for alternating rows
        "}"
        "QTableWidget::item {"
        "   padding: 4px;"
        "   color: black;"
        "   background-color: white;"
        "   border: 1px solid #e0e0e0;"
        "}"
        "QTableWidget::item:selected {"
        "   background-color: #cce8ff;" // A standard light blue for selection (often looks good)
        "   color: black;"
        "}"
        "QTableCornerButton::section {"
        "   background-color: #f0f0f0;" // Match corner button to header style
        "   border: 1px solid #c0c0c0;"
        "}";

    ui->usersTableWidget->setStyleSheet(tableContentStyle);
}

// --- Public method to load user data from CSV into the table ---
void ManageUsersView::loadUsers()
{
    const QString usersFilePath = AppPaths::getUsersFilePath(); // Get the correct, platform-independent path
    QFile file(usersFilePath);

    // The directory creation logic should now be handled by AppPaths::getBaseAppDataDirectory()
    // which is called internally by AppPaths::getUsersFilePath().
    // So, this commented block can remain commented or be removed.
    /*
    QDir dir(QFileInfo(usersFilePath).dir().path()); // Get the directory of the CSV file
    if (!dir.exists()) { // Check if the directory exists
        qDebug() << "Directory for users file does not exist. Creating:" << dir.path();
        if (!dir.mkpath(dir.path())) { // Try to create the directory path
            qWarning() << "Error: Could not create directory for users file:" << dir.path() << "-" << file.errorString();
            QMessageBox::critical(this, "File Creation Error",
                                  QStringLiteral("Could not create directory for users file. Please check permissions:\n") + dir.path());
            return; // Exit if directory cannot be created
        }
    }
    */

    if (!file.exists()) { // Check if the CSV file itself exists
        qDebug() << "Users file not found at" << usersFilePath << ". Attempting to create with header.";
        if (!file.open(QIODevice::WriteOnly | QIODevice::Text)) { // Try to create and open for writing
            qWarning() << "Error: Could not create users file:" << file.errorString();
            QMessageBox msgBox(this);
            msgBox.setStyleSheet(
                "QMessageBox { background-color: white;}"
                "QLabel { color: black;}"
                "QMessageBox QPushButton {"
                "   background-color: lightgray;"
                "   color: black;"
                "   border: 1px solid #c0c0c0;"
                "   padding: 5px 15px;"
                "   border-radius: 3px;"
                "}"
                "QMessageBox QPushButton:hover {"
                "   background-color: #d0d0d0;"
                "}"
                "QMessageBox QPushButton:pressed {"
                "   background-color: #c0c0c0;"
                "}");
            msgBox.setWindowTitle("File Creation Error");
            msgBox.setText(QStringLiteral("Could not create users file. Please check permissions:\n") + usersFilePath);
            msgBox.setIcon(QMessageBox::Critical);
            msgBox.exec();
            return; // Exit if file cannot be created
        }
        QTextStream out(&file); // Create a text stream to write to the file
        out << "Username,Password\n"; // Write the CSV header
        file.close(); // Close the file
        qDebug() << "Created empty users file with header at:" << usersFilePath;
    }

    // --- Now, open the file for reading ---
    if (!file.open(QIODevice::ReadOnly | QIODevice::Text)) { // Try to open the file in read-only mode
        // FIX: Replaced USERS_FILE_PATH with usersFilePath
        QMessageBox msgBox(this);
        msgBox.setStyleSheet(
            "QMessageBox { background-color: white;}"
            "QLabel { color: black;}"
            "QMessageBox QPushButton {"
            "   background-color: lightgray;"
            "   color: black;"
            "   border: 1px solid #c0c0c0;"
            "   padding: 5px 15px;"
            "   border-radius: 3px;"
            "}"
            "QMessageBox QPushButton:hover {"
            "   background-color: #d0d0d0;"
            "}"
            "QMessageBox QPushButton:pressed {"
            "   background-color: #c0c0c0;"
            "}");
        msgBox.setWindowTitle("File Error");
        msgBox.setText(QStringLiteral("Could not load user data. Please ensure 'users.csv' exists and is accessible at ") + usersFilePath + QStringLiteral("."));
        msgBox.setIcon(QMessageBox::Critical);
        msgBox.exec();
        // FIX: Replaced USERS_FILE_PATH with usersFilePath
        qWarning() << "Error: Could not open file for reading:" << usersFilePath << "-" << file.errorString();
        return; // Exit if file cannot be opened
    }

    QTextStream in(&file); // Create a text stream to read from the file
    ui->usersTableWidget->setRowCount(0); // Clear all existing rows in the QTableWidget

    // Skip the header row if it exists
    if (!in.atEnd()) {
        in.readLine(); // Read and discard the first line (header)
    }

    int row = 0; // Initialize row counter for the table
    while (!in.atEnd()) { // Loop until the end of the file
        QString line = in.readLine(); // Read one line from the file
        if (line.trimmed().isEmpty()) continue; // Skip empty lines

        QStringList fields = line.split(','); // Split the line by comma into fields

        const int EXPECTED_USER_COLUMNS = 2; // We expect 2 columns: Username and Password
        if (fields.size() == EXPECTED_USER_COLUMNS) { // Check if the line has the expected number of fields
            ui->usersTableWidget->insertRow(row); // Insert a new row in the table

            // Create and set QTableWidgetItem for Username (column 0)
            ui->usersTableWidget->setItem(row, 0, new QTableWidgetItem(fields.at(0).trimmed()));
            // Create and set QTableWidgetItem for Password (column 1)
            ui->usersTableWidget->setItem(row, 1, new QTableWidgetItem(fields.at(1).trimmed()));

            row++; // Increment row counter
        } else {
            // FIX: Replaced USERS_FILE_PATH with usersFilePath
            qWarning() << "Warning: Skipping malformed user row (" << fields.size() << " fields) in" << usersFilePath << ":" << line;
        }
    }

    file.close(); // Close the file
    ui->usersTableWidget->resizeRowsToContents();
    // FIX: Replaced USERS_FILE_PATH with usersFilePath
    qDebug() << "Users loaded from:" << usersFilePath;
}

// --- Helper function to check if a username already exists ---
// This is used when adding a new user to prevent duplicates, or when updating a username
// to ensure the new username doesn't conflict with another existing one.
bool ManageUsersView::usernameExists(const QString &username, const QList<QStringList> &existingUsers, const QString &excludeUsername) const
{
    // Iterate through the list of existing users
    for (const QStringList &user : existingUsers) {
        // Ensure the user list has at least one element (the username)
        // Compare the trimmed username (case-insensitive) with the new username
        if (user.size() > 0) {
            QString existingUser = user.at(0).trimmed();
            // If we are in "edit" mode and checking for duplicates,
            // we should ignore the current user's original username.
            if (!excludeUsername.isEmpty() && existingUser.compare(excludeUsername, Qt::CaseInsensitive) == 0) {
                continue; // Skip checking against itself if it's the user being edited
            }
            if (existingUser.compare(username, Qt::CaseInsensitive) == 0) {
                return true; // Username found
            }
        }
    }
    return false; // Username not found
}

// --- Helper function to save a list of user data back to the CSV file ---
// This function overwrites the entire CSV file with the provided list.
void ManageUsersView::saveUsersToFile(const QList<QStringList> &users)
{
    const QString usersFilePath = AppPaths::getUsersFilePath(); // Get the correct, platform-independent path
    QFile file(usersFilePath);
    // Open the file in WriteOnly mode, as Text, and Truncate (clear its content first)
    if (!file.open(QIODevice::WriteOnly | QIODevice::Text | QIODevice::Truncate)) {
        // FIX: Replaced USERS_FILE_PATH with usersFilePath
        QMessageBox msgBox(this);
        msgBox.setStyleSheet(
            "QMessageBox { background-color: white;}"
            "QLabel { color: black;}"
            "QMessageBox QPushButton {"
            "   background-color: lightgray;"
            "   color: black;"
            "   border: 1px solid #c0c0c0;"
            "   padding: 5px 15px;"
            "   border-radius: 3px;"
            "}"
            "QMessageBox QPushButton:hover {"
            "   background-color: #d0d0d0;"
            "}"
            "QMessageBox QPushButton:pressed {"
            "   background-color: #c0c0c0;"
            "}");
        msgBox.setWindowTitle("File Error");
        msgBox.setText(QStringLiteral("Could not save user data. Please check file permissions for ") + usersFilePath + QStringLiteral("."));
        msgBox.setIcon(QMessageBox::Critical);
        msgBox.exec();
        // FIX: Replaced USERS_FILE_PATH with usersFilePath
        qWarning() << "Error: Could not open file for writing:" << usersFilePath << "-" << file.errorString();
        return;
    }

    QTextStream out(&file); // Create a text stream to write
    out << "Username,Password\n"; // Write the header row

    for (const QStringList &user : users) { // Iterate through the list of users
        // Ensure the user list has exactly 2 elements (username, password)
        if (user.size() == 2) {
            out << user.at(0).trimmed() << "," << user.at(1).trimmed() << "\n"; // Join with comma and add newline
        } else {
            qWarning() << "Warning: Skipping malformed user entry when saving:" << user.join(",");
        }
    }
    file.close(); // Close the file
    // FIX: Replaced USERS_FILE_PATH with usersFilePath
    qDebug() << "Users saved to:" << usersFilePath;
}

// --- Slot for "Add New Admin" button ---
void ManageUsersView::on_addAdminButton_clicked()
{
    UserDialog dialog(this); // Create a UserDialog instance for adding (empty fields)
    if (dialog.exec() == QDialog::Accepted) { // Show the dialog and check if "OK" was pressed
        QString newUsername = dialog.getUsername();
        QString newPassword = dialog.getPassword();

        // Basic validation for empty fields
        if (newUsername.isEmpty() || newPassword.isEmpty()) {
            QMessageBox msgBox(this);
            msgBox.setStyleSheet(
                "QMessageBox { background-color: white;}"
                "QLabel { color: black;}"
                "QMessageBox QPushButton {"
                "   background-color: lightgray;"
                "   color: black;"
                "   border: 1px solid #c0c0c0;"
                "   padding: 5px 15px;"
                "   border-radius: 3px;"
                "}"
                "QMessageBox QPushButton:hover {"
                "   background-color: #d0d0d0;"
                "}"
                "QMessageBox QPushButton:pressed {"
                "   background-color: #c0c0c0;"
                "}");
            msgBox.setWindowTitle("Input Error");
            msgBox.setText("Username and Password cannot be empty.");
            msgBox.setIcon(QMessageBox::Warning);
            msgBox.exec();
            return;
        }

        // Read all existing users from the file to check for duplicates
        const QString usersFilePath = AppPaths::getUsersFilePath(); // Get the correct, platform-independent path
        QFile file(usersFilePath);
        QList<QStringList> existingUsers;
        if (file.open(QIODevice::ReadOnly | QIODevice::Text)) {
            QTextStream in(&file);
            in.readLine(); // Skip header
            while (!in.atEnd()) {
                QString line = in.readLine();
                if (!line.trimmed().isEmpty()) { // Avoid adding empty lines from file
                    existingUsers.append(line.split(',')); // Split by comma and add to list
                }
            }
            file.close();
        }

        // Check if the new username already exists (pass empty string for excludeUsername)
        if (usernameExists(newUsername, existingUsers, "")) {
            QMessageBox msgBox(this);
            msgBox.setStyleSheet(
                "QMessageBox { background-color: white;}"
                "QLabel { color: black;}"
                "QMessageBox QPushButton {"
                "   background-color: lightgray;"
                "   color: black;"
                "   border: 1px solid #c0c0c0;"
                "   padding: 5px 15px;"
                "   border-radius: 3px;"
                "}"
                "QMessageBox QPushButton:hover {"
                "   background-color: #d0d0d0;"
                "}"
                "QMessageBox QPushButton:pressed {"
                "   background-color: #c0c0c0;"
                "}");
            msgBox.setWindowTitle("Duplicate User");
            msgBox.setText("Username '" + newUsername + "' already exists. Please choose a different username.");
            msgBox.setIcon(QMessageBox::Warning);
            msgBox.exec();
            return; // Stop if username is a duplicate
        }

        // Add the new user to the list of existing users
        existingUsers.append({newUsername, newPassword});
        saveUsersToFile(existingUsers); // Save the updated list back to the CSV file

        QMessageBox msgBox(this);
        msgBox.setStyleSheet(
            "QMessageBox { background-color: white;}"
            "QLabel { color: black;}"
            "QMessageBox QPushButton {"
            "   background-color: lightgray;"
            "   color: black;"
            "   border: 1px solid #c0c0c0;"
            "   padding: 5px 15px;"
            "   border-radius: 3px;"
            "}"
            "QMessageBox QPushButton:hover {"
            "   background-color: #d0d0d0;"
            "}"
            "QMessageBox QPushButton:pressed {"
            "   background-color: #c0c0c0;"
            "}");
        msgBox.setWindowTitle("Success");
        msgBox.setText("Admin '" + newUsername + "' added successfully.");
        msgBox.setIcon(QMessageBox::Information);
        msgBox.exec();
        loadUsers(); // Reload the table to display the newly added user
    }
}

// --- Slot for "Edit Admin Details" button ---
void ManageUsersView::on_editAdminButton_clicked()
{
    int selectedRow = ui->usersTableWidget->currentRow(); // Get the index of the currently selected row
    if (selectedRow == -1) { // If no row is selected
        QMessageBox msgBox(this);
        msgBox.setStyleSheet(
            "QMessageBox { background-color: white;}"
            "QLabel { color: black;}"
            "QMessageBox QPushButton {"
            "   background-color: lightgray;"
            "   color: black;"
            "   border: 1px solid #c0c0c0;"
            "   padding: 5px 15px;"
            "   border-radius: 3px;"
            "}"
            "QMessageBox QPushButton:hover {"
            "   background-color: #d0d0d0;"
            "}"
            "QMessageBox QPushButton:pressed {"
            "   background-color: #c0c0c0;"
            "}");
        msgBox.setWindowTitle("Selection Error");
        msgBox.setText("Please select an admin to edit.");
        msgBox.setIcon(QMessageBox::Warning);
        msgBox.exec();
        return; // Exit
    }

    // Get the username and password from the selected row in the table
    QString currentUsername = ui->usersTableWidget->item(selectedRow, 0)->text();
    QString currentPassword = ui->usersTableWidget->item(selectedRow, 1)->text();

    UserDialog dialog(currentUsername, currentPassword, this); // Create UserDialog for editing (pre-filled)
    if (dialog.exec() == QDialog::Accepted) { // Show dialog and check if "OK" was pressed
        QString updatedUsername = dialog.getUsername(); // Get the potentially changed username
        QString updatedPassword = dialog.getPassword();

        // Basic validation for empty fields
        if (updatedUsername.isEmpty() || updatedPassword.isEmpty()) {
            QMessageBox msgBox(this);
            msgBox.setStyleSheet(
                "QMessageBox { background-color: white;}"
                "QLabel { color: black;}"
                "QMessageBox QPushButton {"
                "   background-color: lightgray;"
                "   color: black;"
                "   border: 1px solid #c0c0c0;"
                "   padding: 5px 15px;"
                "   border-radius: 3px;"
                "}"
                "QMessageBox QPushButton:hover {"
                "   background-color: #d0d0d0;"
                "}"
                "QMessageBox QPushButton:pressed {"
                "   background-color: #c0c0c0;"
                "}");
            msgBox.setWindowTitle("Input Error");
            msgBox.setText("Username and Password cannot be empty.");
            msgBox.setIcon(QMessageBox::Warning);
            msgBox.exec();
            return;
        }

        // Read all users from the file to find and modify the selected one
        const QString usersFilePath = AppPaths::getUsersFilePath(); // Get the correct, platform-independent path
        QFile file(usersFilePath);
        QList<QStringList> allUsers;
        if (file.open(QIODevice::ReadOnly | QIODevice::Text)) {
            QTextStream in(&file);
            in.readLine(); // Skip header
            while (!in.atEnd()) {
                QString line = in.readLine();
                if (!line.trimmed().isEmpty()) {
                    allUsers.append(line.split(','));
                }
            }
            file.close();
        }

        // --- Handle potential username change and duplicate check ---
        // Only check for duplicates if the username has actually changed.
        // Pass the original username to `usernameExists` to exclude it from the check.
        if (updatedUsername.compare(currentUsername, Qt::CaseInsensitive) != 0) {
            if (usernameExists(updatedUsername, allUsers, currentUsername)) {
                QMessageBox msgBox(this);
                msgBox.setStyleSheet(
                    "QMessageBox { background-color: white;}"
                    "QLabel { color: black;}"
                    "QMessageBox QPushButton {"
                    "   background-color: lightgray;"
                    "   color: black;"
                    "   border: 1px solid #c0c0c0;"
                    "   padding: 5px 15px;"
                    "   border-radius: 3px;"
                    "}"
                    "QMessageBox QPushButton:hover {"
                    "   background-color: #d0d0d0;"
                    "}"
                    "QMessageBox QPushButton:pressed {"
                    "   background-color: #c0c0c0;"
                    "}");
                msgBox.setWindowTitle("Duplicate User");
                msgBox.setText("New username '" + updatedUsername + "' already exists. Please choose a different username.");
                msgBox.setIcon(QMessageBox::Warning);
                msgBox.exec();
                return; // Stop if the new username is a duplicate
            }
        }
        // --- End: Handle username change and duplicate check ---

        bool found = false;
        // Iterate through the list of all users to find the one to update
        for (int i = 0; i < allUsers.size(); ++i) {
            // Check if the username matches (case-sensitive as it's from existing data)
            // Use trimmed() for comparison consistency
            if (allUsers.at(i).size() > 0 && allUsers.at(i).at(0).trimmed() == currentUsername) {
                allUsers[i][0] = updatedUsername; // Update the username
                allUsers[i][1] = updatedPassword; // Update the password
                found = true;
                break; // Exit loop once found
            }
        }

        if (found) {
            saveUsersToFile(allUsers); // Save the modified list back to CSV
            QMessageBox msgBox(this);
            msgBox.setStyleSheet(
                "QMessageBox { background-color: white;}"
                "QLabel { color: black;}"
                "QMessageBox QPushButton {"
                "   background-color: lightgray;"
                "   color: black;"
                "   border: 1px solid #c0c0c0;"
                "   padding: 5px 15px;"
                "   border-radius: 3px;"
                "}"
                "QMessageBox QPushButton:hover {"
                "   background-color: #d0d0d0;"
                "}"
                "QMessageBox QPushButton:pressed {"
                "   background-color: #c0c0c0;"
                "}");
            msgBox.setWindowTitle("Success");
            msgBox.setText("Admin '" + currentUsername + "' details updated to '" + updatedUsername + "' successfully.");
            msgBox.setIcon(QMessageBox::Information);
            msgBox.exec();
            loadUsers(); // Reload the table to reflect changes
        } else {
            // This case should ideally not happen if selection and file are consistent
            QMessageBox msgBox(this);
            msgBox.setStyleSheet(
                "QMessageBox { background-color: white;}"
                "QLabel { color: black;}"
                "QMessageBox QPushButton {"
                "   background-color: lightgray;"
                "   color: black;"
                "   border: 1px solid #c0c0c0;"
                "   padding: 5px 15px;"
                "   border-radius: 3px;"
                "}"
                "QMessageBox QPushButton:hover {"
                "   background-color: #d0d0d0;"
                "}"
                "QMessageBox QPushButton:pressed {"
                "   background-color: #c0c0c0;"
                "}");
            msgBox.setWindowTitle("Error");
            msgBox.setText("Selected admin not found in data file. This should not happen.");
            msgBox.setIcon(QMessageBox::Critical);
            msgBox.exec();
        }
    }
}

// --- Slot for "Remove Admin" button ---
void ManageUsersView::on_removeAdminButton_clicked()
{
    int selectedRow = ui->usersTableWidget->currentRow(); // Get the index of the selected row
    if (selectedRow == -1) { // If no row is selected
        QMessageBox msgBox(this);
        msgBox.setStyleSheet(
            "QMessageBox { background-color: white;}"
            "QLabel { color: black;}"
            "QMessageBox QPushButton {"
            "   background-color: lightgray;"
            "   color: black;"
            "   border: 1px solid #c0c0c0;"
            "   padding: 5px 15px;"
            "   border-radius: 3px;"
            "}"
            "QMessageBox QPushButton:hover {"
            "   background-color: #d0d0d0;"
            "}"
            "QMessageBox QPushButton:pressed {"
            "   background-color: #c0c0c0;"
            "}");
        msgBox.setWindowTitle("Selection Error");
        msgBox.setText("Please select an admin to remove.");
        msgBox.setIcon(QMessageBox::Warning);
        msgBox.exec();
        return; // Exit
    }

    QString usernameToRemove = ui->usersTableWidget->item(selectedRow, 0)->text(); // Get username from selected row

    // Ask for confirmation before removing
    QMessageBox confirmationBox(this);
    confirmationBox.setStyleSheet(
        "QMessageBox { background-color: white;}"
        "QLabel { color: black;}"
        "QMessageBox QPushButton {"
        "   background-color: lightgray;"
        "   color: black;"
        "   border: 1px solid #c0c0c0;"
        "   padding: 5px 15px;"
        "   border-radius: 3px;"
        "}"
        "QMessageBox QPushButton:hover {"
        "   background-color: #d0d0d0;"
        "}"
        "QMessageBox QPushButton:pressed {"
        "   background-color: #c0c0c0;"
        "}");
    confirmationBox.setWindowTitle("Confirm Removal");
    confirmationBox.setText("Are you sure you want to remove admin '" + usernameToRemove + "'?");
    confirmationBox.setStandardButtons(QMessageBox::Yes | QMessageBox::No);
    confirmationBox.setIcon(QMessageBox::Question);

    if (confirmationBox.exec() == QMessageBox::Yes) {

        // Read all users from the file, excluding the one to be removed
        const QString usersFilePath = AppPaths::getUsersFilePath(); // Get the correct, platform-independent path
        QFile file(usersFilePath);
        QList<QStringList> allUsers;
        if (file.open(QIODevice::ReadOnly | QIODevice::Text)) {
            QTextStream in(&file);
            in.readLine(); // Skip header
            while (!in.atEnd()) {
                QString line = in.readLine();
                if (!line.trimmed().isEmpty()) {
                    QStringList user = line.split(',');
                    // Add user to the list only if their username is NOT the one to remove
                    // Use trimmed() for comparison consistency
                    if (user.size() > 0 && user.at(0).trimmed().compare(usernameToRemove, Qt::CaseInsensitive) != 0) {
                        allUsers.append(user);
                    }
                }
            }
            file.close();
        }

        saveUsersToFile(allUsers); // Save the filtered list (without the removed user) back to CSV
        QMessageBox msgBox(this);
        msgBox.setStyleSheet(
            "QMessageBox { background-color: white;}"
            "QLabel { color: black;}"
            "QMessageBox QPushButton {"
            "   background-color: lightgray;"
            "   color: black;"
            "   border: 1px solid #c0c0c0;"
            "   padding: 5px 15px;"
            "   border-radius: 3px;"
            "}"
            "QMessageBox QPushButton:hover {"
            "   background-color: #d0d0d0;"
            "}"
            "QMessageBox QPushButton:pressed {"
            "   background-color: #c0c0c0;"
            "}");
        msgBox.setWindowTitle("Success");
        msgBox.setText("Admin '" + usernameToRemove + "' removed successfully.");
        msgBox.setIcon(QMessageBox::Information);
        msgBox.exec();
        loadUsers(); // Reload the table to show the updated list
    }
}
