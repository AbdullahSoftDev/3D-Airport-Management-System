#include "managebookingsview.h"
#include "ui_managebookingsview.h" // Generated by uic from ManageBookingsView.ui
#include <QMessageBox>             // For showing messages
#include <QDebug>                  // For debug output
#include <QTableWidgetItem>        // For table items
#include <QFile>                   // For file operations
#include <QTextStream>             // For text streaming
#include <QDir>                    // For directory operations
#include <QFileInfo>               // For QFileInfo to get directory path
#include <QStringList>             // For QStringList manipulation
#include "apppaths.h"              // Correct: Include AppPaths for consistent file paths

// Define the common stylesheet for QMessageBox instances in this view
// Moved here so it's accessible to all functions within this .cpp file
QString globalMsgBoxStyle =
    "QMessageBox {"
    "    background-color: white;" // Main message box background
    "    border: 1px solid #c0c0c0;" // Optional: add a border to the message box
    "    padding: 10px; /* Padding inside the message box */"
    "}"
    "QMessageBox QDialogButtonBox {"
    "    background-color: transparent;" // Ensure button box background is transparent
    "}"
    "QMessageBox QLabel {" // Target the QLabel that holds the message text
    "    color: black;"           // Text color
    "    background-color: transparent;" // Ensure QLabel's own background is transparent to show QMessageBox background
    "    font-weight: normal;"    // Ensure text is not bold
    "}"
    "QMessageBox QPushButton {"
    "    background-color: lightgray;"
    "    color: black;"
    "    border: 1px solid #c0c0c0;"
    "    padding: 5px 15px;"
    "    border-radius: 3px;"
    "}"
    "QMessageBox QPushButton:hover {"
    "    background-color: #d0d0d0;"
    "}"
    "QMessageBox QPushButton:pressed {"
    "    background-color: #c0c0c0;"
    "}";


ManageBookingsView::ManageBookingsView(QWidget *parent) :
    QWidget(parent),
    ui(new Ui::ManageBookingsView)
{
    ui->setupUi(this); // Initialize the UI from the .ui file

    applyTableStyling(); // Apply custom styling to the table

    // Configure the table widget properties
    ui->bookingsTableWidget->setSelectionBehavior(QAbstractItemView::SelectRows);
    ui->bookingsTableWidget->setSelectionMode(QAbstractItemView::SingleSelection);
    ui->bookingsTableWidget->setEditTriggers(QAbstractItemView::NoEditTriggers); // Make table read-only by default
    ui->bookingsTableWidget->horizontalHeader()->setSectionResizeMode(QHeaderView::Stretch); // Stretch columns to fit
    ui->bookingsTableWidget->setAlternatingRowColors(true); // Alternating row colors for readability

    // Connect buttons to their slots
    // These connects are commented out, but if you uncomment them in the future, they are fine.
    //connect(ui->bookTicketButton, &QPushButton::clicked, this, &ManageBookingsView::on_bookTicketButton_clicked);
    //connect(ui->confirmTicketButton, &QPushButton::clicked, this, &ManageBookingsView::on_confirmTicketButton_clicked);
    //connect(ui->cancelTicketButton, &QPushButton::clicked, this, &ManageBookingsView::on_cancelTicketButton_clicked);

    qDebug() << "ManageBookingsView created.";
    QString buttonStyle =
        "QPushButton {"
        "    background-color: white;"    // Default background: white
        "    color: black;"                // Default text: black
        "    border: 1px solid #333;"      // 1px solid black-ish outline
        "    border-radius: 5px;"          // Slightly rounded corners
        "    padding: 5px 10px;"            // Padding for better look
        "    font-weight: bold;"
        "    font-size: 10px;"              // Adjust font size as needed
        "}"
        "QPushButton:hover,"                // On hover
        "QPushButton:pressed {"             // On pressed (clicked)
        "    background-color: #FD5800;"    // Orange background
        "    color: black;"                // Black text on orange
        "    border: 1px solid #FD5800;"    // Border matches background on hover/pressed
        "}";

    // Apply the stylesheet to each specific button
    ui->bookTicketButton->setStyleSheet(buttonStyle);
    ui->confirmTicketButton->setStyleSheet(buttonStyle);
    ui->cancelTicketButton->setStyleSheet(buttonStyle);
}

ManageBookingsView::~ManageBookingsView()
{
    delete ui; // Clean up the UI object
    qDebug() << "ManageBookingsView destroyed.";
}

void ManageBookingsView::applyTableStyling()
{
    QString tableHeaderStyle =
        "QHeaderView::section {"
        "    background-color: lightgray;"
        "    color: black;"
        "    padding: 6px;"
        "    border: 1px solid #c0c0c0;"
        "    font-weight: bold;"
        "}"
        "QHeaderView::section:hover { background-color: #d0d0d0; }"
        "QHeaderView::section:pressed { background-color: #c0c0c0; }";

    ui->bookingsTableWidget->horizontalHeader()->setStyleSheet(tableHeaderStyle);
    ui->bookingsTableWidget->verticalHeader()->setStyleSheet(tableHeaderStyle);

    QString tableContentStyle =
        "QTableWidget {"
        "    background-color: white;"
        "    gridline-color: #e0e0e0;"
        "    border: 1px solid #a0a0a0;"
        "    alternate-background-color: #f5f5f5;"
        "}"
        "QTableWidget::item {"
        "    padding: 4px;"
        "    color: black;"
        "    background-color: white;"
        "    border: 1px solid #e0e0e0;"
        "}"
        "QTableWidget::item:selected {"
        "    background-color: #d0e0ff;"
        "    color: black;"
        "}"
        "QTableCornerButton::section {"
        "    background-color: lightgray;"
        "    border: 1px solid #c0c0c0;"
        "}";

    ui->bookingsTableWidget->setStyleSheet(tableContentStyle);
}


void ManageBookingsView::loadBookings()
{
    // CORRECTED: Use AppPaths to get the tickets file path
    QString filePath = AppPaths::getTicketsFilePath();
    QFile file(filePath);
    if (!file.exists()) {
        qDebug() << "Bookings file not found at" << filePath << ". Attempting to create with header.";
        QDir dir(QFileInfo(filePath).dir().path());
        if (!dir.exists()) {
            if (!dir.mkpath(dir.path())) {
                qWarning() << "Error: Could not create directory for bookings file:" << dir.path() << "-" << file.errorString();
                QMessageBox msgBox(this); // Use object for styling
                msgBox.setIcon(QMessageBox::Critical);
                msgBox.setWindowTitle("File Creation Error");
                msgBox.setText("Could not create directory for bookings file. Please check permissions:\n" + dir.path());
                msgBox.setStyleSheet(globalMsgBoxStyle); // Apply stylesheet
                msgBox.exec();
                return;
            }
        }

        if (!file.open(QIODevice::WriteOnly | QIODevice::Text)) {
            qWarning() << "Error: Could not create bookings file:" << file.errorString();
            QMessageBox msgBox(this); // Use object for styling
            msgBox.setIcon(QMessageBox::Critical);
            msgBox.setWindowTitle("File Creation Error");
            msgBox.setText("Could not create bookings file. Please check permissions:\n" + filePath);
            msgBox.setStyleSheet(globalMsgBoxStyle); // Apply stylesheet
            msgBox.exec();
            return;
        }
        QTextStream out(&file);
        // Write the header exactly matching your CSV, including all 8 columns
        out << "BookingID,FlightNumber,PassengerName,PassengerContact,BookingDateTime,SeatsBooked,TotalFare,Status\n";
        file.close();
        qDebug() << "Created empty bookings file with header at:" << filePath;
    }

    if (!file.open(QIODevice::ReadOnly | QIODevice::Text)) {
        QMessageBox msgBox(this); // Use object for styling
        msgBox.setIcon(QMessageBox::Critical);
        msgBox.setWindowTitle("File Error");
        msgBox.setText("Could not load booking data. Please ensure 'tickets.csv' exists and is accessible at " + filePath + ".");
        msgBox.setStyleSheet(globalMsgBoxStyle); // Apply stylesheet
        msgBox.exec();
        qWarning() << "Error: Could not open file:" << filePath << "-" << file.errorString();
        return;
    }

    QTextStream in(&file);
    ui->bookingsTableWidget->setRowCount(0); // Clear existing rows

    // Skip header row
    if (!in.atEnd()) {
        in.readLine(); // Read and discard the header line
    }

    int row = 0;
    while (!in.atEnd()) {
        QString line = in.readLine();
        QStringList fields = line.split(',');

        const int EXPECTED_CSV_COLUMNS = 8; // Your tickets.csv has 8 columns
        if (fields.size() == EXPECTED_CSV_COLUMNS) {
            ui->bookingsTableWidget->insertRow(row);

            // Map CSV columns to QTableWidget columns
            // CSV: BookingID(0), FlightNumber(1), PassengerName(2), PassengerContact(3), BookingDateTime(4), SeatsBooked(5), TotalFare(6), Status(7)
            // UI : Booking ID(0), Flight Number(1), Passenger Name(2), Seat Number(3), Booking Date(4), Total Fare(5), Status(6)

            ui->bookingsTableWidget->setItem(row, 0, new QTableWidgetItem(fields.at(0).trimmed())); // Booking ID (from CSV BookingID)
            ui->bookingsTableWidget->setItem(row, 1, new QTableWidgetItem(fields.at(1).trimmed())); // Flight Number (from CSV FlightNumber)
            ui->bookingsTableWidget->setItem(row, 2, new QTableWidgetItem(fields.at(2).trimmed())); // Passenger Name (from CSV PassengerName)
            ui->bookingsTableWidget->setItem(row, 3, new QTableWidgetItem(fields.at(5).trimmed())); // Seat Number (from CSV SeatsBooked)
            ui->bookingsTableWidget->setItem(row, 4, new QTableWidgetItem(fields.at(4).trimmed())); // Booking Date (from CSV BookingDateTime)
            ui->bookingsTableWidget->setItem(row, 5, new QTableWidgetItem(fields.at(6).trimmed())); // Total Fare (from CSV TotalFare)
            ui->bookingsTableWidget->setItem(row, 6, new QTableWidgetItem(fields.at(7).trimmed())); // Status (from CSV Status)

            row++;
        } else {
            qWarning() << "Warning: Skipping malformed booking row (" << fields.size() << " fields) in" << filePath << ":" << line;
        }
    }

    file.close();
    ui->bookingsTableWidget->resizeColumnsToContents();
    qDebug() << "Bookings loaded from:" << filePath;
}

// writeBookingsToCsv is no longer directly used by Confirm/Cancel actions
// because we're using a read-modify-write approach on the CSV directly for those.
// It's kept here as a general utility if needed elsewhere for saving table content.
void ManageBookingsView::writeBookingsToCsv(const QString &filePath)
{
    QFile file(filePath);
    if (!file.open(QIODevice::WriteOnly | QIODevice::Text | QIODevice::Truncate)) {
        QMessageBox msgBox(this); // Use object for styling
        msgBox.setIcon(QMessageBox::Critical);
        msgBox.setWindowTitle("File Write Error");
        msgBox.setText("Could not write to bookings file.\n" + file.errorString());
        msgBox.setStyleSheet(globalMsgBoxStyle); // Apply stylesheet
        msgBox.exec();
        qWarning() << "Error: Could not write to file:" << filePath << "-" << file.errorString();
        return;
    }

    QTextStream out(&file);
    // Write the header row
    out << "BookingID,FlightNumber,PassengerName,PassengerContact,BookingDateTime,SeatsBooked,TotalFare,Status\n";

    for (int row = 0; row < ui->bookingsTableWidget->rowCount(); ++row) {
        // Retrieve data from table widget based on its displayed columns
        QString bookingID = ui->bookingsTableWidget->item(row, 0)->text();
        QString flightNumber = ui->bookingsTableWidget->item(row, 1)->text();
        QString passengerName = ui->bookingsTableWidget->item(row, 2)->text();
        QString seatsBooked = ui->bookingsTableWidget->item(row, 3)->text(); // This is 'SeatsBooked'
        QString bookingDateTime = ui->bookingsTableWidget->item(row, 4)->text();
        QString totalFare = ui->bookingsTableWidget->item(row, 5)->text();
        QString status = ui->bookingsTableWidget->item(row, 6)->text();

        // IMPORTANT: PassengerContact is not in the table, so we need a placeholder or retrieve it if stored elsewhere.
        // For now, we'll use an empty string "" as per the basic BookTicketDialog logic.
        QString passengerContact = ""; // This should ideally be retrieved from a full data model if available.

        // Reconstruct the 8-column CSV line in the correct order
        QStringList rowData;
        rowData << bookingID
                << flightNumber
                << passengerName
                << passengerContact // Insert the placeholder for PassengerContact (CSV column 3)
                << bookingDateTime
                << seatsBooked
                << totalFare
                << status;

        // Join with comma and write to file
        out << rowData.join(',') << "\n";
    }

    file.close();
    qDebug() << "Bookings data successfully written to:" << filePath;
}

// --- SLOT FOR BOOK NEW TICKET BUTTON (already implemented, just here for context) ---
void ManageBookingsView::on_bookTicketButton_clicked()
{
    qDebug() << "Book Ticket button clicked. Opening BookTicketDialog...";
    QString dialogStyle =
        "QDialog {"
        "    background-color: #FD5800;" // Dialog box background color (FD5800 orange)
        "}"
        // Style for the "Book New Ticket" title label
        // IMPORTANT: Make sure the QLabel in BookTicketDialog.ui has objectName=\"bookNewTicketTitleLabel\"
        "QLabel#bookNewTicketTitleLabel {"
        "    color: white;" // White text for the title
        "    font-weight: bold;"
        "    font-size: 20px;" // Adjust font size if needed
        "}"
        // Styles for all other labels in the dialog (e.g., "Flight Number:", "Passenger Name:")
        "QDialog QLabel {"
        "    color: black;" // Black text for all other labels
        "}"
        // Styles for input fields (QLineEdit, QSpinBox, QDateTimeEdit)
        "QDialog QLineEdit, QDialog QSpinBox, QDialog QDateTimeEdit {"
        "    background-color: white;" // White background for input fields
        "    color: black;"            // Black text for input fields
        "    border: 1px solid gray;"
        "    border-radius: 5px;"
        "    padding: 2px;"
        "}"
        // Style for the OK and Cancel buttons within the dialog
        "QDialog QPushButton {"
        "    background-color: white;"
        "    color: black;"
        "    border: 1px solid #ccc;"
        "    border-radius: 5px;"
        "    padding: 5px 15px;"
        "    font-weight: bold;"
        "}"
        "QDialog QPushButton:hover {"
        "    background-color: #e0e0e0;" /* Slightly darker white on hover */
        "}"
        "QDialog QPushButton:pressed {"
        "    background-color: #d0d0d0;" /* Even darker white on pressed */
        "}";

    BookTicketDialog bookDialog(this);
    bookDialog.setStyleSheet(dialogStyle); // Apply the style to the dialog

    int result = bookDialog.exec();

    if (result == QDialog::Accepted) {
        qDebug() << "BookTicketDialog accepted. Reloading bookings...";
        loadBookings(); // Reload the table data to show the newly added booking
    } else {
        qDebug() << "BookTicketDialog cancelled or closed.";
    }
}

// --- NEW/UPDATED SLOTS FOR CONFIRM AND CANCEL BUTTONS ---
void ManageBookingsView::on_confirmTicketButton_clicked()
{
    qDebug() << "Confirm Ticket button clicked.";
    QList<QTableWidgetItem*> selectedItems = ui->bookingsTableWidget->selectedItems();

    if (selectedItems.isEmpty()) {
        QMessageBox msgBox(this); // Use object for styling
        msgBox.setIcon(QMessageBox::Warning);
        msgBox.setWindowTitle("No Selection");
        msgBox.setText("Please select a booking to confirm.");
        msgBox.setStyleSheet(globalMsgBoxStyle); // Apply stylesheet
        msgBox.exec();
        return;
    }

    // Get the row of the selected item (all items in a row are selected in SingleSelection mode)
    int selectedRow = selectedItems.first()->row();
    QString bookingIDToUpdate = ui->bookingsTableWidget->item(selectedRow, 0)->text(); // Booking ID is in column 0

    qDebug() << "Attempting to confirm booking with ID:" << bookingIDToUpdate;

    QString filePath = AppPaths::getTicketsFilePath(); // CORRECTED: Use AppPaths
    QFile file(filePath);
    QStringList lines;
    QString headerLine;
    bool bookingFound = false;

    // Read all lines from the CSV file
    if (file.open(QIODevice::ReadOnly | QIODevice::Text)) {
        QTextStream in(&file);
        if (!in.atEnd()) {
            headerLine = in.readLine(); // Read header
            lines.append(headerLine);
        }
        while (!in.atEnd()) {
            lines.append(in.readLine()); // Read data lines
        }
        file.close();
    } else {
        QMessageBox msgBox(this); // Use object for styling
        msgBox.setIcon(QMessageBox::Critical);
        msgBox.setWindowTitle("File Error");
        msgBox.setText("Could not open bookings file for reading.\n" + file.errorString());
        msgBox.setStyleSheet(globalMsgBoxStyle); // Apply stylesheet
        msgBox.exec();
        qWarning() << "Error: Could not open file for confirming:" << file.errorString();
        return;
    }

    // Iterate through lines to find and update the relevant booking
    for (int i = 1; i < lines.size(); ++i) { // Start from 1 to skip header
        QString line = lines.at(i);
        QStringList fields = line.split(',');

        if (fields.size() == 8 && fields.at(0).trimmed() == bookingIDToUpdate) {
            // Found the booking! Update its status (CSV column index 7)
            if (fields.at(7).trimmed().compare("Booked", Qt::CaseInsensitive) == 0 || fields.at(7).trimmed().compare("Cancelled", Qt::CaseInsensitive) == 0) {
                fields[7] = "Confirmed";
                lines[i] = fields.join(','); // Replace the original line with the updated one
                bookingFound = true;
                qDebug() << "Booking" << bookingIDToUpdate << "status changed to Confirmed.";
            } else if (fields.at(7).trimmed().compare("Confirmed", Qt::CaseInsensitive) == 0) {
                QMessageBox msgBox(this); // Use object for styling
                msgBox.setIcon(QMessageBox::Information);
                msgBox.setWindowTitle("Status Info");
                msgBox.setText("Booking " + bookingIDToUpdate + " is already Confirmed.");
                msgBox.setStyleSheet(globalMsgBoxStyle); // Apply stylesheet
                msgBox.exec();
                return; // Exit as no change is needed
            }
            break; // Exit loop once booking is found and updated
        }
    }

    if (bookingFound) {
        // Write all lines back to the CSV file (overwriting old content)
        if (file.open(QIODevice::WriteOnly | QIODevice::Text | QIODevice::Truncate)) {
            QTextStream out(&file);
            for (const QString &line : lines) {
                out << line << "\n";
            }
            file.close();
            QMessageBox msgBox(this); // Use object for styling
            msgBox.setIcon(QMessageBox::Information);
            msgBox.setWindowTitle("Success");
            msgBox.setText("Booking " + bookingIDToUpdate + " has been Confirmed.");
            msgBox.setStyleSheet(globalMsgBoxStyle); // Apply stylesheet
            msgBox.exec();
            loadBookings(); // Reload the table to reflect the changes
        } else {
            QMessageBox msgBox(this); // Use object for styling
            msgBox.setIcon(QMessageBox::Critical);
            msgBox.setWindowTitle("File Error");
            msgBox.setText("Could not save confirmed status to file.\n" + file.errorString());
            msgBox.setStyleSheet(globalMsgBoxStyle); // Apply stylesheet
            msgBox.exec();
            qWarning() << "Error: Could not open file for writing confirmed status:" << file.errorString();
        }
    } else {
        QMessageBox msgBox(this); // Use object for styling
        msgBox.setIcon(QMessageBox::Warning);
        msgBox.setWindowTitle("Not Found");
        msgBox.setText("Booking " + bookingIDToUpdate + " not found in file.");
        msgBox.setStyleSheet(globalMsgBoxStyle); // Apply stylesheet
        msgBox.exec();
        qWarning() << "Booking" << bookingIDToUpdate << "not found in file for confirmation.";
    }
}

void ManageBookingsView::on_cancelTicketButton_clicked()
{
    qDebug() << "Cancel Ticket button clicked.";
    QList<QTableWidgetItem*> selectedItems = ui->bookingsTableWidget->selectedItems();

    if (selectedItems.isEmpty()) {
        QMessageBox msgBox(this); // Use object for styling
        msgBox.setIcon(QMessageBox::Warning);
        msgBox.setWindowTitle("No Selection");
        msgBox.setText("Please select a booking to cancel.");
        msgBox.setStyleSheet(globalMsgBoxStyle); // Apply stylesheet
        msgBox.exec();
        return;
    }

    int selectedRow = selectedItems.first()->row();
    QString bookingIDToUpdate = ui->bookingsTableWidget->item(selectedRow, 0)->text(); // Booking ID is in column 0

    qDebug() << "Attempting to cancel booking with ID:" << bookingIDToUpdate;

    QString filePath = AppPaths::getTicketsFilePath(); // CORRECTED: Use AppPaths
    QFile file(filePath);
    QStringList lines;
    QString headerLine;
    bool bookingFound = false;

    // Read all lines from the CSV file
    if (file.open(QIODevice::ReadOnly | QIODevice::Text)) {
        QTextStream in(&file);
        if (!in.atEnd()) {
            headerLine = in.readLine(); // Read header
            lines.append(headerLine);
        }
        while (!in.atEnd()) {
            lines.append(in.readLine()); // Read data lines
        }
        file.close();
    } else {
        QMessageBox msgBox(this); // Use object for styling
        msgBox.setIcon(QMessageBox::Critical);
        msgBox.setWindowTitle("File Error");
        msgBox.setText("Could not open bookings file for reading.\n" + file.errorString());
        msgBox.setStyleSheet(globalMsgBoxStyle); // Apply stylesheet
        msgBox.exec();
        qWarning() << "Error: Could not open file for cancelling:" << file.errorString();
        return;
    }

    // Iterate through lines to find and update the relevant booking
    for (int i = 1; i < lines.size(); ++i) { // Start from 1 to skip header
        QString line = lines.at(i);
        QStringList fields = line.split(',');

        if (fields.size() == 8 && fields.at(0).trimmed() == bookingIDToUpdate) {
            // Found the booking! Update its status (CSV column index 7)
            if (fields.at(7).trimmed().compare("Confirmed", Qt::CaseInsensitive) == 0 || fields.at(7).trimmed().compare("Booked", Qt::CaseInsensitive) == 0) {
                fields[7] = "Cancelled";
                lines[i] = fields.join(','); // Replace the original line with the updated one
                bookingFound = true;
                qDebug() << "Booking" << bookingIDToUpdate << "status changed to Cancelled.";
            } else if (fields.at(7).trimmed().compare("Cancelled", Qt::CaseInsensitive) == 0) {
                QMessageBox msgBox(this); // Use object for styling
                msgBox.setIcon(QMessageBox::Information);
                msgBox.setWindowTitle("Status Info");
                msgBox.setText("Booking " + bookingIDToUpdate + " is already Cancelled.");
                msgBox.setStyleSheet(globalMsgBoxStyle); // Apply stylesheet
                msgBox.exec();
                return; // Exit as no change is needed
            }
            break; // Exit loop once booking is found and updated
        }
    }

    if (bookingFound) {
        // Write all lines back to the CSV file (overwriting old content)
        if (file.open(QIODevice::WriteOnly | QIODevice::Text | QIODevice::Truncate)) {
            QTextStream out(&file);
            for (const QString &line : lines) {
                out << line << "\n";
            }
            file.close();
            QMessageBox msgBox(this); // Use object for styling
            msgBox.setIcon(QMessageBox::Information);
            msgBox.setWindowTitle("Success");
            msgBox.setText("Booking " + bookingIDToUpdate + " has been Cancelled.");
            msgBox.setStyleSheet(globalMsgBoxStyle); // Apply stylesheet
            msgBox.exec();
            loadBookings(); // Reload the table to reflect the changes
        } else {
            QMessageBox msgBox(this); // Use object for styling
            msgBox.setIcon(QMessageBox::Critical);
            msgBox.setWindowTitle("File Error");
            msgBox.setText("Could not save cancelled status to file.\n" + file.errorString());
            msgBox.setStyleSheet(globalMsgBoxStyle); // Apply stylesheet
            msgBox.exec();
            qWarning() << "Error: Could not open file for writing cancelled status:" << file.errorString();
        }
    } else {
        QMessageBox msgBox(this); // Use object for styling
        msgBox.setIcon(QMessageBox::Warning);
        msgBox.setWindowTitle("Not Found");
        msgBox.setText("Booking " + bookingIDToUpdate + " not found in file.");
        msgBox.setStyleSheet(globalMsgBoxStyle); // Apply stylesheet
        msgBox.exec();
        qWarning() << "Booking" << bookingIDToUpdate << "not found in file for cancellation.";
    }
}
