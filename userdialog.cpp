#include "userdialog.h"    // Include the header for this class
#include "ui_userdialog.h" // This header is automatically generated by Qt from userdialog.ui
// It defines the 'Ui::UserDialog' class.
#include <QMessageBox>     // Required for displaying message boxes (e.g., for errors)
#include <QDebug>          // Required for qDebug() statements (useful for debugging)
#include <QPalette>        // Required for setting the palette

// --- Constructor for adding a new user ---
// This constructor is called when you want to create a new user.
// The input fields will be empty initially.
UserDialog::UserDialog(QWidget *parent) :
    QDialog(parent), // Call the base class (QDialog) constructor
    ui(new Ui::UserDialog) // Initialize the 'ui' pointer with a new Ui::UserDialog object
{
    ui->setupUi(this); // Set up the UI components as defined in userdialog.ui for THIS dialog
    setWindowTitle("Add New Admin"); // Set the window title
    ui->usernameLineEdit->clear();   // Ensure the username input field is empty
    ui->passwordLineEdit->clear();   // Ensure the password input field is empty
    // Set the password line edit to hide characters (like asterisks or dots)
    ui->passwordLineEdit->setEchoMode(QLineEdit::Password);

    // Connect the button box signals to our custom slots for validation
    connect(ui->buttonBox, &QDialogButtonBox::accepted, this, &UserDialog::on_buttonBox_accepted);
    connect(ui->buttonBox, &QDialogButtonBox::rejected, this, &UserDialog::on_buttonBox_rejected);
}

// --- Constructor for editing an existing user ---
// This constructor is called when you want to modify an existing user's details.
// It pre-fills the input fields with the provided username and password.
UserDialog::UserDialog(const QString &username, const QString &password, QWidget *parent) :
    QDialog(parent), // Call the base class constructor
    ui(new Ui::UserDialog) // Initialize the 'ui' pointer
{
    ui->setupUi(this); // Set up the UI components
    setWindowTitle("Edit Admin Details"); // Set the window title
    ui->usernameLineEdit->setText(username); // Pre-fill the username field
    ui->passwordLineEdit->setText(password); // Pre-fill the password field
    // Set the password line edit to hide characters
    ui->passwordLineEdit->setEchoMode(QLineEdit::Password);

    // --- IMPORTANT CHANGE: Make the username field editable when editing ---
    // Previously, this was set to true, making the username read-only.
    ui->usernameLineEdit->setReadOnly(false);
    // --- END IMPORTANT CHANGE ---

    // Connect the button box signals to our custom slots for validation
    connect(ui->buttonBox, &QDialogButtonBox::accepted, this, &UserDialog::on_buttonBox_accepted);
    connect(ui->buttonBox, &QDialogButtonBox::rejected, this, &UserDialog::on_buttonBox_rejected);
}

// --- Destructor ---
// Cleans up the dynamically allocated Ui::UserDialog object.
UserDialog::~UserDialog()
{
    delete ui; // Delete the 'ui' object to free memory
    qDebug() << "UserDialog destroyed."; // Log a message for debugging
}

// --- Public methods to get data from the dialog ---

// Returns the text currently in the username line edit.
// .trimmed() removes any leading or trailing whitespace.
QString UserDialog::getUsername() const
{
    return ui->usernameLineEdit->text().trimmed();
}

// Returns the text currently in the password line edit.
// We don't trim passwords as spaces might be intentional.
QString UserDialog::getPassword() const
{
    return ui->passwordLineEdit->text();
}

// --- Private Slots (connected to QDialogButtonBox signals) ---

// This slot is called when the "OK" button (or any button mapped to Accepted role) is pressed.
// We use this to perform validation before actually accepting the dialog.
void UserDialog::on_buttonBox_accepted()
{
    // Check if either username or password fields are empty.
    if (getUsername().isEmpty() || getPassword().isEmpty()) {
        // If empty, show a warning message to the user.
        QMessageBox msgBox(this);

        // --- NEW: Explicitly set the palette and auto-fill background ---
        QPalette palette = msgBox.palette();
        palette.setColor(QPalette::Window, Qt::white);       // Background color for the dialog itself
        palette.setColor(QPalette::WindowText, Qt::black);   // Text color for the dialog's direct text
        msgBox.setPalette(palette);
        msgBox.setAutoFillBackground(true); // Ensure background is drawn from palette
        // --- END NEW ---

        msgBox.setStyleSheet(
            "QMessageBox {"
            "   background-color: white;" // Explicitly set background via stylesheet too
            "   color: black;"           // For QMessageBox itself (main body)
            "   border: 1px solid #c0c0c0;" // Add a border for visual separation
            "}"
            "QLabel {"                   // This targets the text label inside QMessageBox
            "   background-color: white;" // Ensure QLabel's background is white
            "   color: black;"
            "}"
            "QMessageBox QPushButton {"
            "   background-color: lightgray;"
            "   color: black;"
            "   border: 1px solid #c0c0c0;"
            "   padding: 5px 15px;"
            "   border-radius: 3px;"
            "}"
            "QMessageBox QPushButton:hover {"
            "   background-color: #d0d0d0;"
            "}"
            "QMessageBox QPushButton:pressed {"
            "   background-color: #c0c0c0;"
            "}");
        msgBox.setWindowTitle("Input Error");
        msgBox.setText("Username and password cannot be empty.");
        msgBox.setIcon(QMessageBox::Warning);
        msgBox.exec();
        // Do NOT call QDialog::accept(). This keeps the dialog open, allowing the user to correct input.
        return; // Return immediately to prevent the dialog from closing
    }
    // If validation passes (fields are not empty), call the base class's accept() method.
    // This will close the dialog and make its exec() method return QDialog::Accepted.
    QDialog::accept();
}

// This slot is called when the "Cancel" button (or any button mapped to Rejected role) is pressed.
void UserDialog::on_buttonBox_rejected()
{
    // Simply call the base class's reject() method.
    // This will close the dialog and make its exec() method return QDialog::Rejected.
    QDialog::reject();
}
