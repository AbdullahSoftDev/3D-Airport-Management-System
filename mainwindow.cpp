#include "mainwindow.h"
#include "ui_mainwindow.h" // This header is generated by uic from mainwindow.ui
#include "searchticketwindow.h" // Include the actual header for SearchTicketWindow
#include "passenger_bookticket.h" // Include the actual header for Passenger_BookTicket
#include "flightschedulewindow.h" // Include the header for FlightScheduleWindow
#include "flightsearchwindow.h"
#include <QMessageBox> // For displaying simple messages (e.g., errors)
#include <QDebug>      // For debugging output
#include "marqueelabel.h"
// Ensure dashboard.h and adminloginwindow.h are included as per mainwindow.h
// #include "adminloginwindow.h" // Already included via mainwindow.h
// #include "dashboard.h"        // Already included via mainwindow.h

MainWindow::MainWindow(QWidget *parent) :
    QWidget(parent),
    ui(new Ui::MainWindow),
    searchTicketWindow(nullptr),
    passengerBookTicketWindow(nullptr),
    flightScheduleWindow(nullptr),
    flightSearchWindow(nullptr),
    adminLoginWindow(nullptr),
    dashboardWin(nullptr)
{
    ui->setupUi(this);
    setWindowTitle("Airport Management System");

    // --- Apply Global Stylesheet for MainWindow and its direct children ---
    this->setStyleSheet(
        "QWidget#MainWindow { background-color: rgb(255, 255, 255); }"
        "QLabel#label_2 { background-color: rgb(85, 170, 255); color: white; border: 1px solid black; border-radius: 5px; }"
        "QLabel#label { font-size: 45px; }"
        "QLabel#label_5 { font-size: 50px; }"
        "QLabel#label_4 { font-size: 40px; color: rgb(85, 170, 255); background-color: transparent; }"
        "QLabel#label_7 { border: 1px solid black; border-radius: 40px; background-color: white; }"
        "QLabel#label_3 { background-color: #ADD8E6; border: none; }" // Light blue background, NO BORDER
        );

    setupButtonStyles();

    // --- Add Marquee Text ---
    if (!ui->label_3) {
        qDebug() << "ERROR: ui->label_3 is null! Cannot place marquee within it. Please check mainwindow.ui.";
        QMessageBox::critical(this, "UI Error", "The QLabel named 'label_3' was not found in the UI. Marquee cannot be displayed.");
        return;
    }

    // --- Debugging label_3's properties before marquee creation ---
    qDebug() << "DEBUG: ui->label_3 properties before marquee creation:";
    qDebug() << "  Object Name: " << ui->label_3->objectName();
    qDebug() << "  Geometry (x,y,w,h): " << ui->label_3->geometry();
    qDebug() << "  Size Hint: " << ui->label_3->sizeHint();
    qDebug() << "  Minimum Size: " << ui->label_3->minimumSize();
    qDebug() << "  Maximum Size: " << ui->label_3->maximumSize();
    qDebug() << "  Size Policy H: " << ui->label_3->sizePolicy().horizontalPolicy();
    qDebug() << "  Size Policy V: " << ui->label_3->sizePolicy().verticalPolicy();


    MarqueeLabel *marqueeLabel = new MarqueeLabel(ui->label_3); // Parent is label_3

    QString longMarqueeText = " Welcome to Airport Management System "
                              " Presented by Abdullah, Badar, Ghazi! ";

                             // " Welcome to Airport Management System - Presented by Muhammad Abdullah!               ";
    marqueeLabel->setText(longMarqueeText);

    // Font is already bold due to QFont::Bold in the QFont constructor
    marqueeLabel->setFont(QFont("Arial Black", 24, QFont::Bold));
    marqueeLabel->setStyleSheet("color: black; background-color: transparent; border: none;font-size:30px");

    // --- Set MarqueeLabel's geometry RELATIVE to its parent (ui->label_3) ---
    // *******************************************************************
    // KEY CHANGE HERE: marqueeHeight set to 10
    // WARNING: This will severely clip the 28pt font vertically.
    // *******************************************************************
    int marqueeHeight = 50;

    //int marqueeYPositionInLabel3 = (ui->label_3->height() - marqueeHeight) / 2;
    //if (marqueeYPositionInLabel3 < 0) marqueeYPositionInLabel3 = 0;

    marqueeLabel->setGeometry(0, 30, ui->label_3->width(), marqueeHeight);

    // --- Debugging MarqueeLabel's properties after creation and geometry setting ---
    qDebug() << "DEBUG: MarqueeLabel properties after creation:";
    qDebug() << "  Parent: " << marqueeLabel->parentWidget()->objectName();
    qDebug() << "  Geometry (relative to parent): " << marqueeLabel->geometry();
    qDebug() << "  Size Hint: " << marqueeLabel->sizeHint();
    qDebug() << "  Effective Size (width,height): " << marqueeLabel->width() << "x" << marqueeLabel->height();
    qDebug() << "  Is Visible: " << marqueeLabel->isVisible();


    marqueeLabel->startMarquee(20000);
    qDebug() << "MarqueeLabel: startMarquee function called.";


    // --- Connect Signals and Slots ---
    connect(ui->searchTicketButton, &QPushButton::clicked, this, &MainWindow::on_searchTicketButton_clicked);
    connect(ui->passengerBookTicketButton, &QPushButton::clicked, this, &MainWindow::on_passengerBookTicketButton_clicked);
    connect(ui->flightScheduleButton, &QPushButton::clicked, this, &MainWindow::on_flightScheduleButton_clicked);
    connect(ui->flightSearchButton, &QPushButton::clicked, this, &MainWindow::on_flightSearchButton_clicked);
    connect(ui->pushButton_8, &QPushButton::clicked, this, &MainWindow::on_pushButton_8_clicked);
    connect(ui->pushButton_9, &QPushButton::clicked, this, &MainWindow::on_pushButton_9_clicked);

    // --- Initialize Child Windows ---
    searchTicketWindow = new SearchTicketWindow();
    searchTicketWindow->setMainWindow(this);

    passengerBookTicketWindow = new Passenger_BookTicket();
    passengerBookTicketWindow->setMainWindow(this);

    flightScheduleWindow = new FlightScheduleWindow();
    flightScheduleWindow->setMainWindow(this);

    flightSearchWindow = new FlightSearchWindow();
    flightSearchWindow->setMainWindow(this);

    adminLoginWindow = new AdminLoginWindow(this);
    adminLoginWindow->setMainWindow(this);

    dashboardWin = new Dashboard(this);
    adminLoginWindow->setDashboard(dashboardWin);

    adminLoginWindow->hide();
    dashboardWin->hide();

    qDebug() << "MainWindow created and initialized.";
}

MainWindow::~MainWindow()
{
    // Clean up dynamically allocated child windows when MainWindow closes
    // IMPORTANT: Only delete objects that were NOT created with 'this' as a parent.
    // adminLoginWindow and dashboardWin are parented to 'this', so Qt automatically deletes them.
    delete searchTicketWindow;
    delete passengerBookTicketWindow;
    delete flightScheduleWindow;
    delete flightSearchWindow;
    // THE FOLLOWING TWO LINES MUST BE REMOVED IF THEY ARE PRESENT IN YOUR FILE:
    // delete adminLoginWindow; // <-- REMOVE THIS LINE
    // delete dashboardWin;    // <-- REMOVE THIS LINE

    delete ui; // Clean up the UI object
    qDebug() << "MainWindow destroyed.";
}

// Helper function to set common styles for the dashboard buttons
void MainWindow::setupButtonStyles()
{
    // Define the common stylesheet for passenger-related buttons
    QString commonPassengerButtonCss =
        "QPushButton {"
        "    font-family: \"Segoe UI\";" /* Explicitly set font family */
        "    font-size: 30px;"         /* Font size as requested (overrides 9pt from 'font' if present) */
        "    font-weight: bold;"       /* Bold font */
        "    color: black;"            /* Text color */
        "    background-color: white;" /* Background color of the button */
        "    border: 1px solid #ccc;"  /* Base Border style */
        "    border-radius: 30px;"     /* Key property: This makes the corners rounded. */
        "    min-width: 60px;"     /* Ensure minimum width and height are 60px for border-radius: 30px to make a circle */
        "    min-height: 60px;"    /* Adjust these values if your desired button size is different */
        "    padding: 0px 5px;"     /* Adjust padding as needed; 0px top/bottom to help maintain 60px height */
        "    box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.2);" /* Optional: Add a subtle box-shadow for depth */
        "}"
        "QPushButton:hover {"
        "    background-color: #F8F8F8; /* Slightly off-white background on hover for visual feedback */"
        "    border: 1px solid black;  /* NEW: Black border on hover, as requested */"
        "    border-radius: 30px;     /* IMPORTANT: Keep border-radius same to maintain circular shape */"
        "    box-shadow: 3px 3px 8px rgba(0, 0, 0, 0.3); /* Slightly more pronounced shadow on hover */"
        "}"
        "QPushButton:pressed {"
        "    background-color: #E0E0E0; /* Darker background when pressed */"
        "    box-shadow: 1px 1px 3px rgba(0, 0, 0, 0.2); /* Smaller shadow when pressed */"
        "}";
    // Apply the common style to all relevant passenger buttons
    ui->flightScheduleButton->setStyleSheet(commonPassengerButtonCss);
    ui->passengerBookTicketButton->setStyleSheet(commonPassengerButtonCss);
    ui->searchTicketButton->setStyleSheet(commonPassengerButtonCss);
    ui->flightSearchButton->setStyleSheet(commonPassengerButtonCss);

    // Define the common stylesheet for login buttons (Admin, Flight Manager)
    QString commonLoginButtonCss =
        "QPushButton {"
        "   color: rgb(255, 255, 255);" // Initial text color: White
        "    font-weight: bold;"       /* Bold font */
        "   font-size: 40px;"
        "   border-radius: 30px;"
        "   background-color: rgb(85, 170, 255);" // Initial background color: Blue
        "   border: 1px solid black;"
        "}"
        "QPushButton:hover {"
        "   color: rgb(85, 170, 255);" // Text color on hover: Blue (the initial background color)
        "   background-color: rgb(255, 255, 255);" // Background color on hover: White
        "}"
        "QPushButton:pressed {"
        "   color: rgb(255, 255, 255);" // Initial text color: White
        "   background-color: rgb(85, 170, 255);" // Initial background color: Blue
        "}";

    // Apply the common style to login buttons
    ui->pushButton_8->setStyleSheet(commonLoginButtonCss); // Admin Login
    ui->pushButton_9->setStyleSheet(commonLoginButtonCss); // Flight Manager Login
}


// --- Slot Implementations for Button Clicks ---

void MainWindow::on_searchTicketButton_clicked()
{
    if (searchTicketWindow) {
        searchTicketWindow->showMaximized(); // Show the search ticket window
        this->hide(); // Hide the MainWindow (main dashboard)
        qDebug() << "Navigating to Search Ticket Window.";
    } else {
        QMessageBox::critical(this, "Error", "Search Ticket Window could not be initialized.");
        qDebug() << "Error: SearchTicketWindow pointer is null.";
    }
}

void MainWindow::on_passengerBookTicketButton_clicked()
{
    if (passengerBookTicketWindow) {
        passengerBookTicketWindow->showMaximized(); // Show the book ticket window
        this->hide(); // Hide the MainWindow (main dashboard)
        qDebug() << "Navigating to Passenger Book Ticket Window.";
    } else {
        QMessageBox::critical(this, "Error", "Book Ticket Window could not be initialized.");
        qDebug() << "Error: Passenger_BookTicketWindow pointer is null.";
    }
}

void MainWindow::on_flightScheduleButton_clicked()
{
    if (flightScheduleWindow) {
        flightScheduleWindow->showMaximized();
        this->hide();
        qDebug() << "Navigating to Flight Schedule Window.";
    } else {
        QMessageBox::critical(this, "Error", "Flight Schedule Window could not be initialized.");
        qDebug() << "Error: FlightScheduleWindow pointer is null.";
    }
}

void MainWindow::on_flightSearchButton_clicked()
{
    if (flightSearchWindow) {
        flightSearchWindow->showMaximized(); // NEW: Show the flight search window
        this->hide();                      // NEW: Hide the MainWindow
        qDebug() << "Navigating to Flight Search Window.";
    } else {
        QMessageBox::critical(this, "Error", "Flight Search Window could not be initialized.");
        qDebug() << "Error: FlightSearchWindow pointer is null.";
    }
}

void MainWindow::on_pushButton_8_clicked()
{
    if (adminLoginWindow)
    {
        adminLoginWindow->show();
        qDebug() << "Navigating to Admin Login Window via pushButton_8.";
    }else {
        QMessageBox::critical(this, "Error", "Admin Login Window could not be initialized.");
        qDebug() << "Error: Admin Login Window pointer is null.";
    }
}

void MainWindow::on_pushButton_9_clicked() // Flight Manager Login Button
{
    QMessageBox::information(this, "Feature Coming Soon", "Flight Manager Login functionality will be implemented here.");
}
