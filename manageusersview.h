#ifndef MANAGEUSERSVIEW_H
#define MANAGEUSERSVIEW_H

#include <QWidget>    // Base class for widgets
#include <QTableWidget> // For displaying user data in a table
#include <QHeaderView>  // For customizing table headers
#include <QFile>        // For file operations (reading/writing CSV)
#include <QTextStream>  // For reading/writing text from/to file
#include <QMessageBox>  // For showing user messages (warnings, info, errors)
#include <QDebug>       // For debugging output
#include <QFileInfo>    // To get information about a file (e.g., its directory)
#include <QDir>         // To handle directories (e.g., creating them)
#include "AppPaths.h"
// Forward declaration of the UI class, generated by Qt from manageusersview.ui
namespace Ui {
class ManageUsersView;
}

class ManageUsersView : public QWidget // Changed from QDialog to QWidget as per your original code
{
    Q_OBJECT // Macro required for Qt's meta-object system (signals/slots)

public:
    // Constructor for the ManageUsersView.
    explicit ManageUsersView(QWidget *parent = nullptr);
    // Destructor.
    ~ManageUsersView();

    // Public method to load user data from the CSV file into the table.
    // This will be called by the Dashboard when the "Manage Users" button is clicked.
    void loadUsers();

private slots:
    // Slots for the three buttons on the UI.
    void on_addAdminButton_clicked();
    void on_editAdminButton_clicked();
    void on_removeAdminButton_clicked();

private:
    // Pointer to the UI object, holding all widgets from manageusersview.ui.
    Ui::ManageUsersView *ui;

    // Helper functions for internal logic:
    void applyTableStyling(); // Applies custom styles to the QTableWidget.
    // Saves a list of user data (each user as QStringList) back to the CSV file.
    void saveUsersToFile(const QList<QStringList> &users);
    // Checks if a username already exists in a given list of users (case-insensitive).
    // The 'excludeUsername' parameter allows checking for duplicates while ignoring a specific username (e.g., the original username when editing).
    bool usernameExists(const QString &username, const QList<QStringList> &existingUsers, const QString &excludeUsername = QString()) const;

    // --- IMPORTANT: Define the path for the users.csv file ---
    // Ensure this path is correct and accessible on your system.
    // This should match the path where you created the users.csv file in Phase 1.
    // Example: "C:/Users/Abdullah/AppData/Roaming/Airlines/users.csv"
    // Use forward slashes for paths in C++ even on Windows.
    //const QString USERS_FILE_PATH = "C:/Users/Abdullah/AppData/Roaming/Airlines/users.csv";
};

#endif // MANAGEUSERSVIEW_H
